= content_for :title do
  = @guide.title
= content_for :extracss do
  = stylesheet_link_tag "guides/show"
= content_for :extrajs do
  :javascript
    var GUIDE = #{json_escape @guide.to_json.html_safe}
  = javascript_include_tag "underscore.min", "map_bundle", "guides/show"
.container
  %ul.breadcrumb
    %li
      = link_to t(:guides), guides_path
      %li.active= @guide.title
  - unless @guide.published?
    .box.bg-warning.text-center.upstacked
      %strong= t(:draft, :default => "draft").upcase
      =t 'views.guides.show.draft_desc' 
  .row
    .col-xs-12
      #actions.right
        - if @guide.downloadable?
          - if @guide.ngz.file?
            .btn.pull-left.btn-link{:disabled => true, :data => {:tip => t('views.guides.mobile_downloads_tip_html'), :tip_position_at => "bottom center", :tip_width => 200, :tip_hide_delay => 200}}
              %i.fa-mobile.fa
              =t :offline_access_enabled
              - if @guide.editable_by?(current_user)
                = link_to "(#{t(:disable, default: "Disable")})".html_safe, guide_path(@guide, :guide => {:downloadable => false}), :method => :put
          - else
            .btn.pull-left.btn-link{:disabled => true, :data => {:tip => t('views.guides.generating_mobile_archive_tip_html'), :tip_position_at => "bottom center", :tip_width => 200, :tip_hide_delay => 200}}
              %span.loading.status.inlineblock
                = succeed '&hellip;'.html_safe do
                  =t(:generating_mobile_archive)
              - if @guide.editable_by?(current_user)
                = link_to "(#{t(:stop)})".html_safe, guide_path(@guide, :guide => {:downloadable => false}), :method => :put
        - if @guide.editable_by?(current_user)
          - if !@guide.ngz_url && !@guide.downloadable?
            %button.btn.btn-default.pull-left{:type => "button", :role => "button", "data-toggle" => "modal", "data-target" => "#mobile_dialog"}
              %i.fa-mobile.fa
              =t :enable_offline_access
        .btn-group.pull-right
          %button.btn.btn-default{:type => "button", :role => "button", "data-toggle" => "modal", "data-target" => "#print_dialog"}
            %i.fa.fa-print
            =t :print_verb
          - if @guide.editable_by?(current_user)
            = link_to edit_guide_path(@guide), :class => "btn btn-default" do
              %i.fa.fa-edit
              = t(:edit)
            - unless @guide.published?
              = link_to t(:publish), guide_path(@guide, :guide => {:publish => "publish"}), :method => :put, :class => "btn btn-primary"
      %h1
        - if @guide.icon.file?
          = image_tag @guide.icon.url(:thumb), :class => "left img-rounded"
        = @guide.title
  .row
    .col-xs-12
      = truncate_with_more formatted_user_text(@guide.description), :length => 300
  .row
    #nav.col-xs-3
      %ul#tags.nav.nav-stacked.nav-pills.stacked
        %li{:class => @tags.blank? && @taxon.blank? ? "active" : nil}
          = link_to url_for_params(:without => [:page, :taxon, :tag, :tags]) do
            = t(:all)
            %span.badge.pull-right= @guide.guide_taxa.count
        - for predicate, tags in @nav_tags.sort_by{|p,t| p}
          - pred = t(predicate.underscore.downcase).is_a?(String) ? t(predicate.underscore.downcase, :default => predicate.humanize) : predicate
          %li.nav-header= pred
          - for tag, value, count in tags.sort_by{|t,v,c| v}
            %li{:class => @tags.include?(tag) ? "active" : nil}
              = link_to url_for_params(:tags => [tag], :without => [:page]) do
                = value
                %span.badge.pull-right= count
              - unless @tags.blank?
                %span.badge.modtag{:class => @tags.include?(tag) ? "removetag" : "addtag"}
                  - if @tags.include?(tag)
                    = link_to "x", url_for_params(:tags => (@tags - [tag]).flatten.uniq)
                  - else
                    = link_to "+", url_for_params(:tags => [@tags, tag].flatten.uniq)
      %ul#taxonomy.nav.nav-stacked.nav-pills.stacked
        %li.nav-header=t :taxonomy
        - nav_taxa = capture do
          - for taxon in @nav_taxa
            %li
              = link_to url_for_params(:taxon => taxon.id, :without => [:page]) do
                %span.badge.right= @nav_taxa_counts[taxon.id]
                = render "shared/taxon", :taxon => taxon, :include_parens => false
        - if @taxon
          - subnav_taxa = capture do
            %li.active
              = link_to url_for_params(:taxon => @taxon.id, :without => [:page]) do
                %span.badge.right= @nav_taxa_counts[@taxon.id]
                = render "shared/taxon", :taxon => @taxon, :include_parens => false
              %ul.nav.nav-stacked.nav-pills
                = nav_taxa
          - if @guide.taxon && !@guide.taxon.ancestor_ids.include?(@taxon.parent_id)
            %li.active
              = link_to url_for_params(:taxon => @taxon.parent_id, :without => [:page]) do
                &laquo;
                =t :back_to
                = render "shared/taxon", :taxon => @taxon.parent, :include_parens => false
              %ul.nav.nav-stacked.nav-pills
                = subnav_taxa
          - else
            = subnav_taxa
        - else
          = nav_taxa
    .col-xs-9
      .stacked
        #guide-navbar.navbar
          .nabar-inner
            %form.navbar-search.pull-left.form-inline
              .input-group
                %input.form-control{:type => "text", :placeholder => t(:search), :name => "q", :value => @q}
                .input-group-btn
                  %button.btn.btn-default=t :search
              - unless @q.blank?
                = link_to t(:clear).capitalize, url_for_params(without: [:q]), :class => "btn btn-default clearbtn"
            .pull-right
              - unless @photo_tags.blank?
                %form.inline{method: :get, id: 'photo-tag-form'}
                  = hidden_fields_for_params(without: ['photo-tag'])
                  %select.form-control{name: 'photo-tag', data: {autosubmit:true}}
                    %option{value:''}=t :photo_type
                    - for tag in @photo_tags
                      %option{selected: tag == @photo_tag}= tag
              %span.dropdown.inlineblock
                %button.btn.btn-default{:data => {:toggle => "dropdown"}}
                  =t :sort
                  %b.caret
                %ul.dropdown-menu.pull-right{:role => "menu"}
                  - for sort in GuideTaxon::SORTS
                    %li= link_to t("views.guides.sorts.#{sort}"), url_for_params(:sort => sort), :tabindex => -1, :class => "#{'active' if @sort == sort}"
              .btn-group
                = link_to t(:grid).capitalize, url_for_params(:view => "grid"), :class => "btn btn-default #{'active' if @view == "grid"}"
                = link_to t(:card).capitalize, url_for_params(:view => "card"), :class => "btn btn-default #{'active' if @view == "card"}"
      #guide-taxa
        - if @guide_taxa.blank?
          .nocontent.meta
            =t :no_matching_species
        - elsif @view == "card"
          - for guide_taxon in @guide_taxa
            .card.row.stacked
              .col-xs-3
                = link_to guide_taxon, :class => "borderless thumbnail img" do
                  - if gp = guide_taxon.guide_photo_for_tag(@photo_tag)
                    = image_tag gp.photo.small_url
                  - elsif guide_taxon.taxon
                    = iconic_taxon_image guide_taxon.taxon
              .col-xs-6
                %h4.name
                  = link_to guide_taxon.display_name, guide_taxon
                - if gs = guide_taxon.guide_sections.order( Arel.sql( "COALESCE(position, id)" ) ).first
                  = truncate_with_more formatted_user_text(gs.description), :length => 400
              .col-xs-3
                .map
                  - if guide_taxon.guide_ranges.blank? && guide_taxon.taxon
                    .taxonmap{setup_map_tag_attrs(                                                      |
                      taxon_layers: [ { taxon: guide_taxon.taxon, ranges: true, observations: true } ], |
                      place_layers: [ { place: @guide.place } ],                                        |
                      latitude: @guide.latitude, longitude: @guide.longitude,                           |
                      map_type: @guide.map_type, zoom_level: @guide.zoom_level) }                       |
                  - elsif gr = guide_taxon.guide_ranges.first
                    = image_tag gr.original_url, :class => "img-responsive"
        - else
          - for row in @guide_taxa.in_groups_of(4)
            .row.stacked
              - for guide_taxon in row.compact
                .col-xs-3
                  - if gp = guide_taxon.guide_photo_for_tag(@photo_tag)
                    = link_to image_tag(gp.photo.small_url, :class => 'img-responsive'), guide_taxon, :class => "thumbnail borderless"
                  - elsif guide_taxon.taxon
                    = link_to iconic_taxon_image(guide_taxon.taxon, :class => 'img-responsive'), guide_taxon, :class => "thumbnail"
                  %h5
                    - if guide_taxon.display_name == guide_taxon.name
                      = link_to guide_taxon do
                        %i= guide_taxon.display_name
                      = cite(gp.attribution) if gp
                    - elsif guide_taxon.display_name.blank?
                      = link_to guide_taxon do
                        %i= guide_taxon.name
                      = cite(gp.attribution) if gp
                    - else
                      = link_to guide_taxon do
                        = guide_taxon.display_name
                      = cite(gp.attribution) if gp
                      .quiet
                        %small
                          %i= guide_taxon.name
        = will_paginate @guide_taxa
  #attribution.meta.upstacked.row
    .col-xs-12
      %p
        - attribution_links = commas_and( @guide.guide_users.map{|gu| link_to_user(gu.user, :content_text => gu.user.name.blank? ? gu.user.login : gu.user.name) } )
        - if @guide.license.blank?
          =t :edited_by_name_html, name: attribution_links
        - else
          =t :edited_by_name_some_rights_reserved_html, name: attribution_links, license: link_to( @guide.license.gsub( /CC-/, "CC " ), url_for_license( @guide.license ) )
      - unless @guide.source_url.blank?
        %p=t :originally_imported_from_url_html, :url => @guide.source_url
      - unless @_citations.blank?
        %p
          =t :photo_credits
          = references(:linked => true)
      = render :partial => "shared/flagging", :locals => { :instance => @guide }

#print_dialog.modal.fade{tabindex: -1, role: 'dialog', 'aria-labelledby' => t(:print_verb) }
  .modal-dialog{role: 'document'}
    .modal-content
      .modal-header
        %button.close{:type => "button", "data-dismiss" => "modal"}
          .span{'aria-hidden' => "true"} &times;
        %h4.modal-title=t :print_verb
      = fields_for :print_dialog do |f|
        .modal-body
          .container-fluid
            %h5=t :layout
            .row
              - Guide::PDF_LAYOUTS.each do |l|
                %div{:class => "col-md-#{12 / Guide::PDF_LAYOUTS.size}"}
                  .radio
                    %label
                      .img= image_tag "guide-#{l}-icon.png", :class => "img-responsive"
                      = f.radio_button :options, l, :name => "guide_pdf_flow_task[options][layout]", :checked => (l == Guide::GRID ? "checked" : nil)
                      = t "views.guides.pdf_layouts.#{l}", :default => l
                      .small.meta=t "views.guides.pdf_layout_notes.#{l}", :default => ""
            .row
              .col-xs-12
                %h5=t :taxa_to_include
            #pdf_taxa.row
              = f.fields_for :options do |fo|
                .col-xs-6
                  .radio
                    %label
                      = fo.radio_button :query, "all", :checked => true
                      =t :all_taxa_in_this_guide
                - filter_match_enabled = [@tags, @q, @taxon].map(&:blank?).include?(false)
                .col-xs-6
                  .radio
                    %label
                      = fo.radio_button :query, request.query_string, :checked => false, :disabled => !filter_match_enabled
                      =t :x_taxa_matching_current_filters, :count => @guide_taxa.total_entries
        .modal-footer
          .btn.btn-inter.text-muted
            .text-muted
              =t :most_browser_print_pdf
          = link_to t(:print_verb), guide_path(@guide, :layout => "grid", :print => "t"), :id => "printbtn", :class => "btn btn-primary", :target => "_blank"

- if @guide.editable_by?(current_user)
  #mobile_dialog.modal.fade
    .modal-dialog{role: 'document'}
      .modal-content
        .modal-header
          %button.close{:type => "button", "data-dismiss" => "modal"} x
          %h4=t :enable_offline_access_for_mobile
        = form_for @guide do |f|
          .modal-body
            .container-fluid
              = f.hidden_field :downloadable, :value => true
              .row
                .col-xs-3.text-center
                  %i.fa.fa-mobile.fa-6{:style => "font-size:200px;width:100px;line-height:1;"}
                .col-xs-9
                  %p=t 'views.guides.mobile_downloads_help_html'
          .modal-footer
            %button.btn.btn-default{"data-dismiss" => "modal"}=t :cancel
            = f.submit t(:enable_offline_access), :class => "btn btn-primary", :data => {'loading-click' => true}
