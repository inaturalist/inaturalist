- content_for(:title) do
  = @title = "Segmentation Statistic"
- content_for(:extracss) do
  :css
    body { font-family: Arial,sans-serif; }
    .tooltip {
        position: absolute;
        padding: 10px;
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 5px;
        pointer-events: none;
        opacity: 0;
    }
%script{ src: "https://d3js.org/d3.v4.js" }
- content_for(:extrajs) do
  :javascript
    var STATS_JSON = #{ @segmentation_statistic.to_json.html_safe };
    $( document ).ready( function() {
      var data = STATS_JSON;
      var width = 1000;
          height = 700;
      var svg = d3.select( "#user_dataviz" ).append( "svg" )
        .attr( "viewBox", "0 0 " + width + " " + height )
        .attr( "preserveAspectRatio", "xMinYMin meet" );

      var root = d3.hierarchy( data ).sum( function( d ){ return d.value } )
      var sumOfLeaves = root.value;
      d3.treemap()
        .size( [width, height] )
        .paddingTop( 28 )
        .paddingRight( 7 )
        .paddingInner( 3 )
        ( root )

      var color = d3.scaleOrdinal()
        .domain( ["web", "ios", "android", "seek", "other", "ider"] )
        .range( ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b"] );

      var opacity = d3.scaleLinear()
        .domain( [10, 30] )
        .range( [.5, 1] )

      svg
        .selectAll( "rect" )
        .data( root.leaves() )
        .enter()
        .append( "rect" )
        .attr( "x", function ( d ) { return d.x0; } )
        .attr( "y", function ( d ) { return d.y0; } )
        .attr( "width", function ( d ) { return d.x1 - d.x0; } )
        .attr( "height", function ( d ) { return d.y1 - d.y0; } )
        .style( "stroke", "black" )
        .style( "fill", function( d ){ return color( d.data.name );} )
        .style("opacity", function( d ){ return opacity( d.data.value ) } )
        .on( "mouseover", function( d ) {
          tooltip.style( "opacity", 1 );
          tooltip.style( "left", ( d3.event.pageX + 10 ) + "px" );
          tooltip.style( "top", ( d3.event.pageY + 10 ) + "px" );
          tooltip.html(
            "Name: " + d.data.name + "<br/>" + 
            "Value: " + d.data.value.toLocaleString() + "<br/>" +
            "Percent: " + ( d.data.value / sumOfLeaves * 100 ).toFixed( 2 ) + "%"
          );
        } )
        .on( "mouseout", function() {
          tooltip.style( "opacity", 0 );
        } );
      
      var tooltip = d3.select( "body" )
        .append( "div" )
        .attr( "class", "tooltip" )
        .style( "opacity", 0 );
  
      svg
        .selectAll( "text" )
        .data( root.leaves().filter( function(d) { 
          return d.data.value > 10000 & d.parent.parent.data.name == "existing";
        } ) )
        .enter()
        .append( "text" )
        .attr( "x", function( d ){ return d.x0 + 5} )
        .attr( "y", function( d ){ return d.y0 + 20} )
        .text( function( d ){ return d.data.name } )
        .attr( "font-size", "12px" )
        .attr( "fill", "white" )

      svg
        .selectAll( "vals" )
        .data( root.leaves().filter(function( d ) { 
          return d.data.value > 10000 & d.parent.parent.data.name == "existing"; 
        } ) )
        .enter()
        .append( "text")
        .attr( "x", function(d){ return d.x0 + 5} )
        .attr( "y", function(d){ return d.y0 + 35} )
        .text( function(d){ return d.data.value.toLocaleString() } )
        .attr( "font-size", "11px" )
        .attr( "fill", "white" )

      svg
        .selectAll( "vals" )
        .data( root.leaves().filter( function( d ) { 
          return d.data.value > 10000 & d.parent.parent.data.name == "existing"; 
        } ) )
        .enter()
        .append( "text" )
          .attr( "x", function(d){ return d.x0+5} )
          .attr( "y", function(d){ return d.y0+50} )
          .text( function(d){ return ( d.data.value / sumOfLeaves * 100 ).toFixed( 2 ) + "%"; } )
          .attr( "font-size", "11px" )
          .attr( "fill", "white" )
          
      svg
        .selectAll( "titles")
        .data( root.descendants().filter( function( d ) {return d.depth==1} ) )
        .enter()
        .append( "text" )
          .attr( "x", function( d ){ return d.x0} )
          .attr( "y", function( d ){ return d.y0+21} )
          .text( function( d ){ 
            var ratio = ( d.value / sumOfLeaves * 100 ).toFixed( 2 );
            return d.data.name + ": " + d.value.toLocaleString() + " (" + ratio + "%)" 
          } )
          .attr( "font-size", "15px" )
          .attr( "fill",  "black" )
      
      svg
        .selectAll( "titles" )
        .data( root.descendants().filter( function( d ){return d.depth == 2;} ) )
        .enter()
        .append( "text" )
          .attr( "x", function( d ){ return d.x0} )
          .attr( "y", function( d ){ return d.y0+21} )
          .text( function( d ){ 
            var ratio = ( d.value / sumOfLeaves * 100 ).toFixed( 2 );
            if ( d.value > 10000 ) {
              return d.data.name + ": " + d.value.toLocaleString() + " (" + ratio + "%)" 
            } else {
              return d.data.name + ": " + d.value.toLocaleString()
            }
          } )
          .attr( "font-size", "14px" )
          .attr( "fill",  "black" )
      } );
    var STATS_DAU_MAU_JSON = #{ @segmentation_dau_mau.to_json.html_safe };
    $( document ).ready( function() {
      var data = STATS_DAU_MAU_JSON;
      var margin = {top: 20, right: 30, bottom: 40, left: 180};
      var width = 1000 - margin.left - margin.right;
          height = 300 - margin.top - margin.bottom;

      var tooltip = d3.select( "body" )
        .append( "div" )
        .attr( "class", "tooltip" )
        .style( "opacity", 0 );
  
      var svg = d3.select( "#dau_mau_dataviz" )
        .append( "svg" )
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

      // Add X axis
      var x = d3.scaleLinear()
        .domain([0, 100])
        .range([ 0, width]);
      svg.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x))
        .selectAll("text")
          .attr("transform", "translate(-10,0)rotate(-45)")
          .style("text-anchor", "end");

      // Y axis
      var y = d3.scaleBand()
        .range([ 0, height ])
        .domain(data.map(function(d) { return d.label; }))
        .padding(.1);
      svg.append("g")
        .call(d3.axisLeft(y))

      //Bars
      svg.selectAll("myRect")
        .data(data)
        .enter()
        .append("rect")
        .attr("x", x(0) )
        .attr("y", function(d) { return y(d.label); })
        .attr("width", function(d) { return x(d.value); })
        .attr("height", y.bandwidth() )
        .attr("fill", "#69b3a2")
        .on( "mouseover", function( d ) {
          tooltip.style( "opacity", 1 );
          tooltip.style( "left", ( d3.event.pageX + 10 ) + "px" );
          tooltip.style( "top", ( d3.event.pageY + 10 ) + "px" );
          tooltip.html(
            "Group: " + d.label + "<br/>" + 
            "DAU/MAU: " + d.value.toFixed( 2 ) + "%"
          );
        } )
        .on( "mouseout", function() {
          tooltip.style( "opacity", 0 );
        } );
      } );
    var STATS_DAU_MAU_CREATED_AT_JSON = #{ @segmentation_dau_mau_by_created_at_buckets.to_json.html_safe };
    $( document ).ready( function() {
      var data = STATS_DAU_MAU_CREATED_AT_JSON;
      var margin = {top: 20, right: 30, bottom: 40, left: 180};
      var width = 1000 - margin.left - margin.right;
          height = 500 - margin.top - margin.bottom;

      var tooltip = d3.select( "body" )
        .append( "div" )
        .attr( "class", "tooltip" )
        .style( "opacity", 0 );
  
      var svg = d3.select( "#dau_mau_created_at_dataviz" )
        .append( "svg" )
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

      // Add X axis
      var x = d3.scaleLinear()
        .domain([0, 100])
        .range([ 0, width]);
      svg.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x))
        .selectAll("text")
          .attr("transform", "translate(-10,0)rotate(-45)")
          .style("text-anchor", "end");

      // Y axis
      var y = d3.scaleBand()
        .range([ 0, height ])
        .domain(data.map(function(d) { return d.label; }))
        .padding(.1);
      svg.append("g")
        .call(d3.axisLeft(y))

      //Bars
      svg.selectAll("myRect")
        .data(data)
        .enter()
        .append("rect")
        .attr("x", x(0) )
        .attr("y", function(d) { return y(d.label); })
        .attr("width", function(d) { return x(d.value); })
        .attr("height", y.bandwidth() )
        .attr("fill", "#69b3a2")
        .on( "mouseover", function( d ) {
          tooltip.style( "opacity", 1 );
          tooltip.style( "left", ( d3.event.pageX + 10 ) + "px" );
          tooltip.style( "top", ( d3.event.pageY + 10 ) + "px" );
          tooltip.html(
            "Group: " + d.label + "<br/>" + 
            "DAU/MAU: " + d.value.toFixed( 2 ) + "%"
          );
        } )
        .on( "mouseout", function() {
          tooltip.style( "opacity", 0 );
        } );
      } );
       
.container-fluid
  .row
    .col-xs-12
      %h1 Logged in User Segments
      = "30 days period ending on #{@record_date}"
      #user_dataviz
  .row
    .col-xs-12
      %h1 DAU/MAU
      = "30 days period ending on #{@record_date}"
      #dau_mau_dataviz
  .row
    .col-xs-12
      %h1 DAU/MAU by account creation date
      = "30 days period ending on #{@record_date}"
      #dau_mau_created_at_dataviz