<% content_for(:title)  do %>
  <%=t :observations_by_user, :user=> h(@login) %>
<% end %>

<% content_for(:extracss) do %>
<%= stylesheet_link_tag 'observations', 'observations/by_login', 'observations/filters' %>
<style type="text/css" media="screen">
  .observations.table .header.user,
  .observations.table .observation .attribute.user {
    display: none;
  }
  
  .observations.infowindow .observation { width: 220px; }
  
  #edit_selected_button {
    background-color: #FFC;
  }
  
  #delete_selected_button {
    color: #777;
  }
  
  .buttonrow .status.loading {
    display: block;
    float: left;
    width: auto;
    padding-top: 6px;
    margin: 0pt 0.583em 0.667em 0pt;
  }
  
  #filters_button {
    padding-left: 17px;
    padding-right: 10px;
    background: 7px 10px url('/images/toggle_arrow_right.png') no-repeat;
    border: 1px solid transparent;
    background-color: white;
    outline: none;
    -moz-border-radius-bottomleft: 0;
    -webkit-border-bottom-left-radius: 0;
    -moz-border-radius-bottomright: 0;
    -webkit-border-bottom-right-radius: 0;
    
  }

  #filters_button.open {
    background: 5px 12px url('/images/toggle_arrow_down.png') no-repeat;
    border: 1px solid #eee;
    border-bottom: 1px solid white;
    padding-bottom: 18px;
    margin-bottom: -1px;
  }
  
</style>
<!--[if lte IE 7]>
  <%= stylesheet_link_tag 'blueprint/ie', 'observations-ie' %>
<![endif]-->
<% end %>

<% content_for(:extrajs) do %>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
<%= javascript_include_tag 'inaturalist',
                           'inaturalist/map3',
                           "observations/filters",
                           'jquery/plugins/jquery.labelize',
                           'jquery/plugins/inat/checkboxes' %>

 <script type="text/javascript" charset="utf-8">
    // define a function to be run after the window is fully loaded
    <% if !params[:nelat].blank? && !params[:nelng].blank? && !params[:swlat].blank? && !params[:swlng].blank? %>
      var bounds = new google.maps.LatLngBounds(
        new google.maps.LatLng(<%= params[:swlat] %>, <%= params[:swlng] %>),
        new google.maps.LatLng(<%= params[:nelat] %>, <%= params[:nelng] %>)
      )
    <% else %>
      var bounds = new google.maps.LatLngBounds()
    <% end -%>
    function initialize() {
      // create a Google Map instance
      var map = window.map = iNaturalist.Map.createMap({lat: 9.793177, lng: -83.971242, zoom: 8});
    
      // Create a basic icon and a 'new' icon
      // Note the convient color syntax
      var obsIcon = iNaturalist.Map.createObservationIcon({color: "HotPink"});
      var newObsIcon = iNaturalist.Map.createObservationIcon({color: "DeepPink"});
    
      var observations = <%= @observations.to_json(:viewer => current_user, 
        :include => { :user => { :only => :login }, :taxon => {}, :iconic_taxon => {} }) %>;
      
      var letter_counter = 0;
      var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

      $.each(observations, function(o) {
        var o = this;
        if ((o.latitude && o.longitude) || (o.private_latitude && o.private_longitude)) {
          map.addObservation(o, {
            icon: iNaturalist.Map.createObservationIcon({
              color: "HotPink",
              character: letters[letter_counter],
              stemless: o.coordinates_obscured
            })
          });
          letter_counter++;
          bounds.extend(new google.maps.LatLng(o.latitude || o.private_latitude, 
            o.longitude || o.private_longitude));
        }
      });
      
      // zoom the map to the extent of the observations
      map.fitBounds(bounds)
      
      // create infowindows and behaviors
      $.each(observations, function(observation) {
        var observation = this;
        var icon_div = $('#observation-'+observation.id+' .icon').get(0);
        if (typeof(map.observations[observation.id]) != 'undefined') {
          var marker = map.observations[observation.id];
          
          // add the marker image to the list
          var src = marker.getIcon()
          if (src.url) src = src.url
          var icon_img = $('<img/>').attr('src', src).addClass('marker');
    
          // bind the observation's marker as the context to operate in when
          // the obsNode is clicked in the list.
          $(icon_img).click(function() {
            map.openInfoWindow.apply(marker);
          });
        }
        else {
          var icon_img = $('<img src="/images/mapMarkers/questionmarker.png"/>');
        }
        $(icon_div).text('').append(icon_img);
      });
      
      // Reveal columns
      $('.created_at').show();
    }
    
    $(document).ready(initialize);
    
    function batchEdit() {
      $('.observation .icon').toggle();
      $('#batch_edit_button').toggle();
      if ($('#batchcontrols').is(":visible")) {
        $('#batchcontrols').hide();
      } else {
        $('#batchcontrols').show();
      }
      if ($('.observation .attribute.control').length > 0) {
        $('.observation .attribute.control').toggle();
      } else {
        buildBatchEditControls();
        $('.observation').labelize();
      };
      
      // Uncheck all if hidden
      if ($('.observation .attribute.control:visible').length == 0) {
        $('.observation .attribute.control input:checkbox').uncheck();
      };
    }
    
    function buildBatchEditControls() {
      $('.observation').prepend(
        $('<div class="control attribute">').append(
          $('<input type="checkbox"/>')
        ).css({
          'text-align': 'center',
          'vertical-align': 'middle',
          'background-color': '#ffc',
          'position': 'relative'
        })
      );
      $('.observation').each(function() {
        var obs_id = $(this).attr('id').split('-').pop();
        $(this).find('.control input:checkbox').val(obs_id);
      });
    }
    
    function editSelected() {
      actOnSelected("<%= url_for(:action => 'edit_batch') %>");
    }
    
    function actOnSelected(baseURL, options) {
      var options = $.extend({}, options);
      var obs_inputs = $.makeArray($('.observation .control input:checkbox:checked'));
      var obs_ids = $.map(obs_inputs, function(input) { return $(input).val(); });
      if (obs_ids.length > 0) {
        if (options.method == "post") {
          var form = $('<form method="post" style="display:none"></form>').attr('action', baseURL).append(
            $('<input type="hidden" name="o">').val(obs_ids.join(',')),
            $('<input type="hidden" name="authenticity_token">').val('<%= form_authenticity_token %>')
          );
          $('body').append(form);
          $(form).submit();
        } else {
          window.location = baseURL + "?o=" + obs_ids.join(',');
        }
      } else {
        alert('<%=t :you_need_to_select_some_observations_first %>');
      }
    }
    
    function flickrTagger() {
      if (!confirm('<%=t :this_will_try_to_add_tags_to_your_flickr %>')) return;
      
      actOnSelected(
        '<%= url_for :controller => "taxa", :action => "tag_flickr_photos_from_observations" %>',
        {method: "post"}
      );
    }
    
    function deleteSelected() {
      var obs_inputs = $.makeArray($('.observation .control input:checkbox:checked'));
      var obs_ids = $.map(obs_inputs, function(input) { return $(input).val(); });
      if (obs_ids.length > 0) {
        iNaturalist.restfulDelete("<%= url_for(:action => 'delete_batch') %>", {
          plural: true,
          data: {
            authenticity_token: encodeURIComponent(<%= form_authenticity_token.inspect %>),
            o: obs_ids.join(',')
          }, 
          complete: function() {
            $.each(obs_inputs, function() {
              $(this).parents('.observation').fadeOut('normal', function() {
                $(this).remove()
              });
            });
            
            $('#delete_selected_button').show();
            $('#delete_selected_button').next('.loading.status').remove();
          }
        }, $('#delete_selected_button'));
      } else {
        alert('<%=t :you_need_to_select_some_observations_first %>');
      }
    }
    
    function selectToday() {
      var d = new Date()
      var m = d.getMonth()+1
      var day = d.getDate()
      if (day < 10) { day = '0'+day}
      if (m < 10) { m = '0'+m }
      var dateString = [d.getFullYear(), m, day].join('-')
      $('.observed_on .date[title='+dateString+']').each(function() {
        $(this).parents('.observation').find('.control input').check()
      })
    }
    
    function redoSearchInMapArea() {
      var bounds = map.getBounds();
      $('#filters input[name=swlat]').val(bounds.getSouthWest().lat());
      $('#filters input[name=swlng]').val(bounds.getSouthWest().lng());
      $('#filters input[name=nelat]').val(bounds.getNorthEast().lat());
      $('#filters input[name=nelng]').val(bounds.getNorthEast().lng());
      $('#submit_filters_button').click();
    }
 </script>
 
 <!--[if lt IE 8]>
 <script src="http://ie7-js.googlecode.com/svn/trunk/lib/IE8.js" type="text/javascript"></script>
 <![endif]-->
<% end %>

<% content_for(:extrahead) do %>
  <link rel="alternate" type="application/atom+xml" title=<%= t(:recent_observations_by, :login=> h(@login) ) %>  href="<%= url_for({:controller => 'observations', :action => 'by_login', :login => @login, :format => 'atom'}) %>" />
<% end %>

<% unless @proj_obs_errors_obs.blank? -%>
  <div class="error">
  <h3><%= raw t(:the_following_observations_could, :link=> "{link_to @project.title, @project}") %></h3>
    <ul>
      <% for o in @proj_obs_errors_obs %>
        <li class="clear stacked">
          <% image_and_content observation_image(o, :style => "max-width: 48px; margin: 0 auto; display:block;") do %>
            <%= link_to o.to_plain_s(:user => false), o %>
            <div>
              <%= @proj_obs_errors[:errors][o.id].join("<br/>") %>
            </div>
          <% end %>
        </li>
      <% end %>
    </ul>
  </div>
<% end -%>

<%- tools = capture do -%>
  <div id="tools" class="buttonrow">
    <% if @user && @user.login == @login -%>
      <%= link_to t(:add_observations_), new_observation_path, 
                  :id => "newobsbutton", :class => "default button"%>
      <%= link_to_function(t(:batch_edit), "batchEdit()", :id => "batch_edit_button", :class => 'button') %>
      <div id="batchcontrols" style="display: none">
        <%= link_to_function(t(:stop_editing), "batchEdit()", :id => "stop_batch_edit_button", :class => 'button') %>
        <%= link_to_function(t(:edit_selected), "editSelected()", :id => "edit_selected_button", :class => 'button') %>
        <span class="inter">
          Select
          <%= link_to_function(t(:all), "$('.observation .control input:checkbox').check()", :id => "select_all_button") %>
          |
          <%= link_to_function(t(:today), "selectToday()", :id => "select_today_button") %>
          |
          <%= link_to_function(t(:none), "$('.observation .control input:checkbox').uncheck()", :id => "select_none_button") %>
        </span>
        
        <%= link_to_function t(:flickr_tagger), "flickrTagger()", :id => "flickr_tagger_button", :class => "minor button",
          :title => t(:add_taxonomic_tags_to_the_fickr_photos) %>
        <% unless @project_users.blank? -%>
          <% link_to_toggle_menu t(:add_to_project), :id => "add_to_project_button", :class => "minor button",
              :wrapper => {:class => "inter toggle_menu_list", :style => "padding: 0"} do %>
            <ul>
              <% for project_user in @project_users %>
                <li class="inline buttonrow">
                    <%= link_to_function "add", 
                      "actOnSelected('#{add_project_observation_batch_path(project_user.project)}', {method: 'post'})",
                      "data-loading-click" => "Adding...",
                      :class => "glaucous button" %>
                    <%= link_to_function "remove", 
                      "actOnSelected('#{remove_project_observation_batch_path(project_user.project)}', {method: 'post'})",
                      "data-loading-click" => "Removing...",
                      :class => "pale button" %>
                  <%= link_to h(project_user.project.title), project_user.project, :class => "inter" %>
                </li>
              <% end %>
            </ul>
          <% end %>
        <% end -%>
        <%= link_to_function(t(:delete_selected), "deleteSelected()", :id => "delete_selected_button", :class => 'minor button') %>
      </div>
    <% end -%>
    <%= link_to_function(t(:search), 'toggleFilters(this)', 
      :id => 'filters_button', 
      :class => "inter#{' open' if @filters_open} minor button") %>
  </div>
  <div id="filters" class="clear"<% unless @filters_open %> style="display: none"<% end %>>
    <% form_tag observations_by_login_path(@login), :method => :get do -%>
      <%= render :partial => 'filter_fields', :locals => {
        :selected_taxa => @iconic_taxa
      } %>
    <% end -%>
  </div>
<% end %>

<%= render :partial => 'shared/by_login_header', :locals => {:after => tools} %>

<div id="listcol" class="column span-17">
  <div class="observations table">
    <%= render :partial => 'observations_table_header' %>
    <%= render(:partial => 'cached_component', 
               :collection => @observations) %>
  </div><!-- end observations table -->
  <% if @observations.empty? %>
    <div id="no_obs_message" class="description">
      <%=t :no_matching_observations %>
      <% if @user and @user.login == @login %>
      <%= link_to t(:add_observations_), new_observation_path, 
                  :class => 'default inline button' %>
      <% end %>
    </div>
  <% end %>
  <div id="pagination">
    <% Rails.logger.debug "[DEBUG] @prefs: #{@prefs.inspect}" %>
    <% if logged_in? -%>
      <% form_for :preferences, :url => url_for, :html => {:style => "float: left"} do |f| %>
        <%= f.label t(:per_page) %>
        <%= f.select :per_page, ApplicationController::PER_PAGES, 
          {:selected => @prefs["per_page"].to_i}, :onchange => "$(this).parents('form:first').submit()" %>
      <% end %>
    <% end -%>
    
    <%= will_paginate @observations, :renderer => INatLinkRenderer %>
  </div>
</div>

<div id="mapcol" class="column span-7 last stacked">
  <div id="map"></div>
  <%= link_to_function "Redo search in map area", 
    "redoSearchInMapArea()", 
    :id => 'redo_search_in_map_area_button',
    "data-loading-click" => "Loading..." %>
</div>

<div class="last column span-24">
  <div id="feeds" class="small ui description">
    <% if logged_in? && current_user.id == @selected_user.id -%>
      <%= link_to t(:widget), observations_widget_path %> |
    <% end -%>
    
    <span class="feeds">
      Feeds:
      <%- 
        feed_params = params.reject do |key,value|
          ObservationsController::REJECTED_FEED_PARAMS.include?(key)
        end
        kml_feed_params = params.reject do |key,value|
          ObservationsController::REJECTED_KML_FEED_PARAMS.include?(key)
        end
        kml_feed_params[:kml_type] = "network_link"
      -%>
      <%= link_to(t(:atom), observations_by_login_feed_path(@login, :format=>'atom', :params => feed_params),     :class => 'atomlink', :rel => "nofollow") %>
      <%= link_to(t(:kml),  observations_by_login_feed_path(@login, :format=>'kml', :params => kml_feed_params),  :class => 'kmllink', :rel => "nofollow") %>
      <%= link_to(t(:csv),  observations_by_login_feed_path(@login, :format=>'csv', :params => feed_params),      :class => 'csvlink', :rel => "nofollow") %>
      
    </span>
  </div>
</div>
