- content_for :extracss do
  = stylesheet_link_tag "taxa"
.container
  .row
    .col-xs-12
      %h1 Mushroom Observer Import
      %p
        This tool will import your observations from Mushroom Observer to iNat. You'll need to get a Mushroom Observer API key from
        = link_to "http://mushroomobserver.org/account/api_keys", "http://mushroomobserver.org/account/api_keys"
  .row
    .col-xs-6
      %p
        %strong 1. First, preview your import
      = form_for moimport_observations_path, html: { class: "form-inline" } do |f|
        .form-group
          %input.form-control{ type: "text", name: "api_key", placeholder: "Enter your Mushroom Observer API key", style: "min-width: 300px", value: @api_key }
        %input.btn.btn-default{ type: "submit", value: "Test", data: { loading_click: "Loading..." } }
    .col-xs6
      %p
        - if @results.blank?
          %strong.text-muted 2. (Preview before you import)
        - else
          %strong 2. Ok, now you can import
      = form_for MushroomObserverImportFlowTask.new, 
          url: flow_tasks_url,
          data: { confirm: "Are you sure? This is going to take a while, so expect the following screen to tell you there was an error because it was taking too long. Ignore it! You'll get an email when the import is done though, whether or not it succeeds." } do |f|
        = f.hidden_field :redirect_url, value: observations_by_login_url( current_user.login )
        = f.fields_for :inputs, f.object.inputs.first || f.object.inputs.build do |fti|
          = fti.fields_for :extra do |ftie|
            = ftie.text_field :api_key_display, class: "text", placeholder: "Enter your Mushroom Observer API key", style: "min-width: 300px", value: @api_key, disabled: true
            = ftie.hidden_field :mo_user_id, value: @mo_user_id
            = ftie.hidden_field :api_key, value: @api_key
        = f.submit "Import", class: "btn btn-primary", data: { loading_click: "Loading..." }, disabled: @results.blank?
  - if @errors && !@errors.blank?
    .row
      .col-xs-12
        .alert-danger.alert.upstacked
          Errors:
          %ul
            - for error in @errors
              %li= error
  - if @results
    .row
      .col-xs-12
        %h2
          Test Import for MO user
          = @mo_user_name
          = "(#{@mo_user_id})"
        %table.table
          %thead
            %tr
              %th Photo
              %th Taxon
              %th Date
              %th Latitude
              %th Longitude
              %th Accuracy
              %th Geoprivacy
              %th Place desc
              %th Description &amp; MO URL
          %tbody
            - @results.each do |result, observation|
              - mo_url = @mo_import_task.mo_url_from_result( result )
              %tr
                %td
                  - if ( images = @mo_import_task.images_from_result( result ) ) && images.size > 0
                    - images.each do |img|
                      %img{ src: "http://images.mushroomobserver.org/thumb/#{img[:id]}.jpg" }
                  - elsif observation
                    = iconic_taxon_image( observation.taxon )
                - if observation
                  %td
                    - if observation.taxon
                      = render "shared/taxon", taxon: observation.taxon, link_url: observation.taxon
                    - else
                      Placeholder:
                      = observation.species_guess
                  %td.nobr
                    = observation.munge_observed_on_with_chronic; observation.observed_on
                  %td= observation.latitude
                  %td= observation.longitude
                  %td
                    - unless observation.positional_accuracy.blank?
                      = "#{observation.positional_accuracy} m"
                  %td= observation.geoprivacy
                  %td= observation.place_guess
                  %td
                    = formatted_user_text observation.description
                    %p
                      MO URL:
                      = link_to mo_url, mo_url
                - else
                  %td{ colspan: 8 }
                    .alert.alert-danger
                      - if @mo_import_task.warnings && !@mo_import_task.warnings[mo_url].blank?
                        %p Problems:
                        %ul
                          - @mo_import_task.warnings[mo_url].each do |w|
                            %li= w
                      - else
                        %p Failed to parse data from Mushroom Observer:
                        %pre= result.to_xml
                      %p
                        MO URL:
                        = link_to mo_url, mo_url
  .row
    .col-xs-12
      %h2 How This Works
      %p
        iNat will import all of your MO observations, doing its best to
        translate MO's data model to our own. The testing tool above will
        give you a sense for what your imported data will look like on
        iNat. It should not import the same record twice, so if you run this
        multiple times, don't expect a record that's already been imported
        to change. It will store the MO URL as an observation field so you
        can always refer back to the original.
      %h3 Some caveats
      %ul
        %li
          %strong Names will not allways match up:
          iNat will do its best to match MO names with iNat taxa, but it's not
          always going to be perfect. If we can't find a matching taxon, we'll
          just add a "placeholder" and you'll need to look for taxon-less
          observations to correct them.
        %li
          %strong iNat will use the MO consensus name, not your name.
        %li
          %strong Observations not from collection location will be skipped:
          iNat is for recording observations from where and when they were
          observed in the wild.
        %li
          %strong You are the photo copyright holder:
          iNat does not support uploading photos by other people. It will
          assume and state publicly that you are the copyright holder for all
          images.
        %li
          %strong Geoprivacy is either open or private:
          MO allows you to "Hide exact coordinates" which will hide the exact
          coordinates if you entered them, but will still show the general
          locality you entered. Since that general locality might be larger than
          an iNat obscuration cell, setting geoprivacy to "obscured" might end
          up revealing a more specific location than you were expecting on MO,
          so we're being conservative and setting the geoprivacy to "private" in
          these cases.
          - if @mo_url_field
            If you want to review these records after import,
            = succeed "." do
              = link_to observations_by_login_url( current_user.login, "field:#{@mo_url_field.name}" => "", geoprivacy: Observation::PRIVATE ) do
                use this search
