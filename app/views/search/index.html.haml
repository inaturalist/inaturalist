- content_for :title do
  =t :search
- content_for :extracss do
  :css
    .bootstrap .media-left {
      padding-right: 20px;
    }
    .project-result .media-left.icon .inner {
      border: 1px solid #aaa;
    }
    .user-result .media-left.icon .inner,
    .user-result .media-left.icon .inner a {
      border-radius: 500px;
    }
    .bootstrap .media {
      margin-top: 23px;
    }
    .media-left a {
      display: block;
      width: 66px;
      height: 66px;
      text-align: center;
    }
    .media-left.icon a {
      background-color: #aaa;
      border: 1px solid #ddd;
      border-radius: 2px;
    }
    .project-result .media-left.icon a {
      border: 2px solid white;
      width: 65px;
      height: 65px;
    }
    .media-left.icon a i { font-size: 40px; line-height: 60px; color: white; }
    .project-result .media-left.icon a i { font-size: 36px; }
    .place-result .media-left.icon a { background-color: transparent; border: 0 transparent; }
    .place-result .media-left.icon a i { color: #74ac00; font-size: 50px; line-height: 45px; }
    .user-result .media-left.icon a i { line-height: 57px; }
    .media-left.icon a i[class*="iconic"] { font-size: 50px; line-height: 55px; }
    .media-left a img { width: 100%; max-height: 66px; max-width: 66px; }
    .media-left .usericon {
      display: block;
      width: 66px;
      height: 66px;
      background-size: cover;
      border-radius: 500px;
      background-position: center;
      border: 1px solid #ddd;
    }
    .media .taxon a { color: #428BCA !important; }
    .taxon-result .media-left a {
      border: 1px solid #ddd;
      border-radius: 2px;
    }
    #controls { margin: 10px 0 40px; }
    .form-search .btn { background-color: #74ac00; border-color: #74ac00; }
    .form-search .input-group { width: 300px; }
    .media-heading,
    .media-body p {
      font-size: 16px;
      overflow: hidden;
      display: -webkit-box;
      -webkit-line-clamp: 1;
      -webkit-box-orient: vertical;
      text-overflow: ellipsis;
      margin-bottom: 5px;
    }
    .media-heading .text-muted { color: #aaa; }
    .media-body p {
      -webkit-line-clamp: 2;
    }
.container
  .row
    .col-xs-12
      %h1= @q.blank? ? t(:search) : t(:search_results_for_query, query: @q)

      #controls
        = form_tag( url_for, method: :get, class: "form-search form-inline pull-right" ) do
          .input-group
            %input.text.form-control{ name: "q", type: "text", value: @q, placeholder: t(:search) }
            .input-group-btn
              = submit_tag t(:go), class: "btn btn-primary"
            - @sources.each do |source|
              %input{ type: "hidden", name: "source[]", value: source }
        #source-btns.btn-group
          = link_to t(:all), search_path( q: @q ), class: "btn btn-default #{@sources.blank? ? "active" : nil}"
          - %w(taxa users projects places).each do |source|
            = link_to t( source, default: source ), search_path( q: @q, "source[]": source ), class: "btn btn-default #{@sources.include?( source ) ? "active" : nil}"
  .row
    .col-xs-12
      - if @results.blank?
        .upstacked.text-center.text-muted
          %p=t :no_results
      - else
        - for record in @results
          - matched_terms = @results_matched_terms["#{record.class.name}-#{record.id}"]
          .media{ class: "#{record.class.name.parameterize}-result" }
            - if record.is_a?( Taxon )
              .media-left{ class: record.default_photo.blank? ? "icon" : nil }
                .inner
                  = link_to record do
                    - if record.default_photo.blank?
                      %i{ class: "icon-iconic-#{record.iconic_taxon_name.try(:underscore) || 'unknown'}"}
                    - else
                      = taxon_image( record )
              .media-body
                %h4.media-heading
                  = highlight render( "shared/taxon", taxon: record, link_url: record ), matched_terms || @q
                  %span.text-muted= "|"
                  = link_to t(:view_observations), observations_path( taxon_id: record.id ), class: "view-obs-link"
                %p.unstacked
                  - txt = record.wikipedia_summary || record.auto_summary
                  - if txt.blank?
                    =t :no_description
                  - else
                    = highlight( strip_tags( txt ), matched_terms || @q )
                - other_names = record.taxon_names.select{|tn| tn.name != record.name && tn.name != record.common_name.try(:name) }
                - unless other_names.blank?
                  %p.text-muted
                    = succeed ":" do
                      = t(:other_names)
                    :ruby
                      name_strings = other_names.sort_by{|tn| tn.name.downcase.include?( @q.to_s.downcase ) ? 0 : 1 }.map do |tn|
                        tn.is_scientific_names? ? "<span class='sciname #{record.rank}'>#{tn.name}</span>" : capitalize_name( tn.name )
                      end
                    = highlight( name_strings[0..5].join( ", " ), matched_terms || @q )
            - elsif record.is_a?( Place )
              .media-left.icon
                .inner
                  = link_to record do
                    %i.fa.fa-map-marker
              .media-body
                %h4.media-heading
                  = highlight link_to( record.translated_name( I18n.locale, default: record.display_name ), record ), matched_terms || @q
                  %span.text-muted= "|"
                  = link_to t(:view_observations), observations_path( place_id: record.id ), class: "view-obs-link"
                - if record.place_type_name.blank?
                  %p=t :no_description
                - else
                  %p= t( "place_geo.geo_planet_place_types.#{record.place_type_name.to_s.parameterize.underscore}", default: record.place_type_name ).capitalize
            - elsif record.is_a?( Project )
              .media-left{ class: record.icon? ? nil : "icon" }
                .inner
                  = link_to record do
                    - if record.icon?
                      = image_tag record.icon.url(:span2)
                    - else
                      %i.fa.fa-briefcase
              .media-body
                %h4.media-heading
                  = highlight link_to( record.try_methods( :name, :title ), record ), matched_terms || @q
                  %span.text-muted= "|"
                  = link_to t(:view_observations), observations_path( project_id: record.slug ), class: "view-obs-link"
                %p
                  - txt = record.try_methods( :body, :description )
                  - if txt.blank?
                    =t :no_description
                  - else
                    = highlight( truncate( strip_tags( txt ), length: 300 ), matched_terms || @q )
                  
            - elsif record.is_a?( User )
              .media-left{ class: record.icon? ? nil : "icon" }
                .inner
                  = link_to record do
                    - if record.icon?
                      .usericon{ style: "background-image: url( '#{record.icon.url(:medium)}')" }
                    - else
                      %i.icon-person
              .media-body
                %h4.media-heading
                  = highlight link_to( record.login, person_path( record ) ), matched_terms || @q
                  - unless record.name.blank?
                    %span.text-muted
                      = surround "(", ")" do
                        = highlight link_to( record.name, person_path( record ) ), matched_terms || @q
                  %span.text-muted= "|"
                  = link_to t(:view_observations), observations_path( user_id: record.login ), class: "view-obs-link"
                %p
                  - txt = record.try_methods( :description, :name ).to_s
                  - if txt.blank?
                    =t :no_description
                  - elsif record.spammer.nil?
                    .alert.alert-warning
                      =t :profile_visibility_desc, site_name: @site.name
                  - else
                    = highlight strip_tags( txt.truncate( 300 ) ), matched_terms || @q
            - else
              .media-left.icon
                .inner
                  = link_to record do
                    %i.icon-iconic-unknown
              .media-body
                %h4.media-heading= link_to record.try_methods( :login, :name, :title ), record
                %p= highlight strip_tags( record.try_methods( :body, :description ).to_s.truncate( 300 ) ), matched_terms || @q
        = will_paginate @results, renderer: INatLinkRenderer, skip_right: true
  - if logged_in? && @sources.include?( "taxa" )
    .row
      .col-xs-12
        = separator
        .quiet.box
          .row
            .col-xs-12
              %h4=t :not_seeing_what_looking_for
              %p=t :sorry_how_about_we_try_repeat
          .row
            - ratatosk.name_providers.each_with_index do |np,i|
              .col-xs-4
                - name = np.class.source.try(:title) || nil
                - name_key = np.class.name.split('::').last.gsub(/NameProvider/, '').underscore
                - short_name = name_key.humanize
                - name ||= short_name
                - name = t( "name_providers.#{name.underscore}", default: name )
                - url = np.class.source.try(:url)
                - code = np.class.name.split('::').last.gsub(/NameProvider/, '').underscore.downcase
                = form_tag search_taxa_path, method: :get do
                  %label
                    - if url
                      = link_to name, url
                    - else
                      = name
                  %input{ name: "all_names", type: "hidden", value: "true" }
                  %input{ name: "include_external", type: "hidden", value: "true" }
                  %input{ name: "force_external", type: "hidden", value: "true" }
                  %input{ name: "external_src", type: "hidden", value: code }
                  %input{ name: "return_to", type: "hidden", value: url_for( request.query_parameters ) }
                  .form-inline
                    .input-group
                      %input.form-control{ name: "q", value: @q }
                      %span.input-group-btn
                        %input.btn.btn-default{ type: "submit", value: raw( t(:search) ) }
            .col-xs-4
              %label=t :still_no_luck?
              %div
                - if is_curator?
                  = link_to t(:create_new_taxon), new_taxon_path( name: @q ), class: "btn btn-default"
                - else
                  :ruby
                    feedback_url = @site.discourse_url
                    feedback_url = @site.feedback_url if feedback_url.blank?
                    feedback_url = CONFIG.feedback_url if feedback_url.blank?
                  =t "views.search.index.no_taxa_options_html", feedback_url: feedback_url, help_email: @site.email_help.blank? ? CONFIG.help_email : @site.email_help
