- content_for :title do
  =title_by_user @title = @trip.title
- content_for :extracss do
  = stylesheet_link_tag "trips/show"
- content_for :extrajs do
  :javascript
    $('.observationcontrols').observationControls()
    $("#comment_body").textcompleteUsers( );
- content_for :extrahead do
  %meta{:property => "og:image", :content => html_attributize(@shareable_image_url)}
  %meta{:property => "twitter:image", :content => html_attributize(@shareable_image_url)}
  %meta{:property => "og:description", :content => html_attributize(@shareable_description)}
  %meta{:name => "twitter:card", :content => "summary"}
  %meta{:name => "og:title", :content => html_attributize(@title)}
  %link{ rel: "schema.DC", href: "http://purl.org/dc/elements/1.1/" }
  %link{ rel: "schema.DCTERMS", href: "http://purl.org/dc/terms/" }
  %meta{ name: "DC.creator", content: @trip.user.published_name }
  %meta{ name: "DC.publisher", content: @site.name }
  %meta{ name: "DCTERMS.issued", content: @trip.published_at }
.container
  - if @trip.published_at.nil?
    .alert.alert-warning.upstacked= t(:preview)
  %ul.breadcrumb.clearfix
    %li
      - if @trip.parent.is_a?(Project)
        - if @trip.parent.is_new_project?
          = link_to t( :x_project_journal, project: strip_tags( @parent.title ), name: t( :journal ) ), project_journal_path(@trip.parent)
        - else
          = link_to t(:x_journal, :user => @trip.parent.title), project_journal_path(@trip.parent)
      - elsif @trip.parent.is_a?(Site)
        = link_to t(:x_blog, x: @trip.parent.name), site_posts_path
      - elsif @trip.is_a?(Trip)
        = link_to t(:trips), trips_path
      - else
        - link_txt = is_me? ? t(:header_your_journal) : t(:users_journal, user: @trip.user.login, vow_or_con: @trip.user.login[0].downcase )
        = link_to link_txt, journal_by_login_path( @trip.user.login )
    %li.active
      = link_to @trip.title, @trip
      - if @trip.is_a?(Trip)
        = surround '(', ')' do
          =t :trip
    %li.pull-right.prevnext
      - if @prev
        = link_to @prev do
          %i.fa.fa-chevron-left
          = truncate @prev.title
      - if @next
        = '|' if @prev
        = link_to @next do
          = truncate @next.title
          %i.fa.fa-chevron-right
  .row.upstacked
    .col-xs-3
      %ul#sidenav.sidenav.nav.nav-list{:data => {:spy => "affix"}}
        %li= link_to t(:summary), "#summary"
        - unless @trip.body.blank?
          %li= link_to t(:description), "#description"
        - if @trip.is_a?( Trip ) && !@target_list_set.blank?
          %li= link_to t( :target_list ), "#target_list"
        - unless @trip.observations.blank?
          %li= link_to t(:observations), "#observations"
        %li= link_to t(:comments), "#comments"
    .col-xs-9
      %section{:id => "summary"}
        - if @trip.editable_by?(current_user)
          .btn-group.pull-right
            = link_to @trip.is_a?(Trip) ? edit_trip_path(@trip) : edit_post_path(@trip), :class => "btn btn-default" do
              %i.fa.fa-edit
              = t(:edit)
        %h1= @title
        - if @trip.is_a?(Trip)
          .subtitle.text-muted
            = l(@trip.start_time, :format => :long) if @trip.start_time
            \-
            = l(@trip.stop_time, :format => :long) if @trip.start_time
          .small.text-muted.stacked
            \|
            - if @trip.latitude
              = t( :latitude_value, latitude: @trip.latitude.round( 3 ) )  if @trip.latitude
              \|
            - if @trip.longitude
              = t( :longitude_value, longitude: @trip.longitude.round( 3 ) )
              \|
            - if @trip.radius
              = t( :radius_value, radius: @trip.radius )
              \|
            - if @trip.distance
              = t( :distance_traveled_value, distance: @trip.distance.to_i )
              \|
            - if ( @trip.start_time && @trip.stop_time )
              = t( :duration_value, duration: ( ( @trip.stop_time - @trip.start_time ) / 1.minutes ).to_i )
              \|
            - if @trip.number
              = t( :number_of_observers_value, number: @trip.number )
              \|
      - unless @trip.body.blank?
        %section.stacked.post{:id => "description"}
          = formatted_user_text(@trip.body, scrubber: PostScrubber.new(tags: Post::ALLOWED_TAGS, attributes: Post::ALLOWED_ATTRIBUTES), skip_simple_format: (@trip.preferred_formatting == Post::FORMATTING_NONE))
          .small.text-muted.stacked
            = render "posts/attribution", post: @trip
      - if @trip.is_a?(Trip)
        - unless @target_list_set.blank?
          %section{:id => "target_list"}
            %h2
              =t :target_list
              %span.glyphicon.glyphicon-info-sign.info-link{ "style" => "margin-left:5px;font-size:15px;color:gray", "data-content" => t(:trip_target_list_info), "data-placement" => "top", "data-toggle" => "popover" }
            - 2.times do |i|
              - if i==0
                - st = @target_list_set[0..@target_list_set.count/2]
              - else
                - st = @target_list_set[(@target_list_set.count/2+1)..@target_list_set.count]
              .col-xs-6
                %ul.taxon_links.plain
                - for element in st
                  %li
                    = render "shared/taxon", :taxon => element[:taxon], :link_url => element[:taxon]
                    - if element[:observations].count > 0
                      - element[:observations][0..7].each do |o|
                        = link_to observation_path( :id => o["id"] )  do
                          %svg{ :height => "10", :width => "10" }
                            %title= o["taxon"]["name"]
                            %circle{ :cx => "5", :cy => "5", :r => "5", :stroke => "black", :stroke-width => "3", :fill => "#337ab7" }
                      - if element[:observations].count > 8
                        ="..."
      - unless @trip_observations.blank? && @trip.observations.blank?
        %section{:id => "observations"}
          .observationcontrols.pull-right
          %h2=t :observations
          - if @trip.is_a?(Trip)
            .observations.medium.grid
              - compact do
                = render :partial => "observations/cached_component", :collection => @trip_obsevations
            .text-muted
              :ruby
                obs_params = {
                  taxon_is_active: true,
                  lat: @trip.latitude,
                  lng: @trip.longitude,
                  radius: ( @trip.radius == 0 ? 0 : @trip.radius / 1000.to_f ),
                  d1: @trip.start_time.iso8601,
                  d2: @trip.stop_time.iso8601,
                  user_id: @trip.user_id
                }
                obs_params[:place_id] = @trip.place_id unless @trip.place_id.blank?
              = link_to observations_url(obs_params), :class => "readmore" do
                =t( :search_observations)
          - else
            .observations.medium.grid
              - compact do
                = render :partial => "observations/cached_component", :collection => @trip.observations
      %section{:id => "comments"}
        - if @trip.published_at
          = render "comments/comments", parent: @trip, header_tag: :h2, hide_form: @trip.prefers_no_comments?
        - else
          = render "comments/comments", parent: @trip, header_tag: :h2, hide_form: true
        - if logged_in? && current_user.id != @trip.user_id && !@trip.prefers_no_comments?
          .upstacked
            = render "subscriptions/subscription", resource: @trip.becomes( Post )
        .upstacked
          = render :partial => "shared/flagging", :locals => { :instance => @post }
