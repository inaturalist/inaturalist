  <%= gmap_include_tag %>
  <%= javascript_include_tag 'inaturalist/map2', 
                             'jquery/plugins/jquery.url.packed.js' %>
  <script type="text/javascript" charset="utf-8">
    $(document).ready(function() {
      var drawingMap = iNaturalist.Map.createMap({div: 'drawingMap'});
      window.drawingMap = drawingMap;
      drawingMap.addControl(new ClearShapesControl());
      drawingMap.enableGoogleBar();
      
      <% if @geometry %>
        // loading pre-existing geom
        <% for geom in @geometry %>
          var polygon = <%= Ym4r::GmPlugin::GPolygonEncoded.from_georuby(geom, "#f33f00", 5, 1, "#ff0000", 0.2).to_javascript.html_safe %>;
          drawingMap.addOverlay(polygon);
          if (typeof(drawingMap._shapes) == 'undefined') drawingMap._shapes = [];
          drawingMap._shapes.push(polygon);
          GEvent.bind(polygon, 'mouseover', polygon, polygon.enableEditing);
          GEvent.bind(polygon, 'mouseout', polygon, polygon.disableEditing);
          GEvent.bind(polygon, 'lineupdated', polygon, function() {
            updateGeometry(drawingMap);
          });
          var polygonBounds = polygon.getBounds();
          drawingMap.setZoom(drawingMap.getBoundsZoomLevel(polygonBounds));
          drawingMap.setCenter(polygonBounds.getCenter());
        <% end %>
        updateGeometry(drawingMap);
      <% else %>
        // add the first shape
        addShape(window.drawingMap);
      <% end %>
    });
    
    function addPlace(placeJSON, character) {
      importMap.addOverlay(
        importMap.createMarker(placeJSON.latitude, placeJSON.longitude, {
            icon: iNaturalist.Map.createObservationIcon({character: character})
        })
      );
    }
    
    function addPlaces(placesJSON) {
      importMap.clearOverlays();
      var bounds = new GLatLngBounds();
      for (var i=0; i < placesJSON.length; i++) {
        addPlace(placesJSON[i], num2letterID(i));
        bounds.extend(new GLatLng(placesJSON[i].latitude, placesJSON[i].longitude));
      }
      importMap.setZoom(importMap.getBoundsZoomLevel(bounds));
      importMap.setCenter(bounds.getCenter());
    }
    
    function addShape(map) {
      var polygon = new GPolygon([], "#f33f00", 5, 1, "#ff0000", 0.2);
      map.addOverlay(polygon);
      polygon.enableDrawing();
      GEvent.bind(polygon, 'mouseover', polygon, polygon.enableEditing);
      GEvent.bind(polygon, 'mouseout', polygon, polygon.disableEditing);
      GEvent.bind(polygon, 'lineupdated', polygon, function() {
        updateGeometry(map);
      });
      
      if (typeof(map._shapes) == 'undefined') map._shapes = [];
      map._shapes.push(polygon);
    }
    
    function addPlaceMarker(map, latitude, longitude) {
      map._placeMarker = map.createMarker(latitude, longitude, {draggable: true});
      map.addOverlay(map._placeMarker);
      map._placeMarker.enableDragging();
      GEvent.addListener(map._placeMarker, 'dragend', function(latLng) {
        $('#place_latitude').val(latLng.lat());
        $('#place_longitude').val(latLng.lng());
        map._placeMarker._moved = true;
      });
      
      return map._placeMarker;
    }
    
    function updateGeometry(map) {
      var bounds = new GLatLngBounds();
      if (typeof(map._shapes) == 'undefined') map._shapes = [];
      $.each(map._shapes, function() {
        var shapeBounds = this.getBounds();
        if (!bounds.containsBounds(shapeBounds)) {
          bounds.extend(shapeBounds.getSouthWest());
          bounds.extend(shapeBounds.getNorthEast());
        };
      });
      
      if (typeof(map._placeMarker) == 'undefined') {
        addPlaceMarker(map, bounds.getCenter().lat(), bounds.getCenter().lng());
      }
      
      if (map._shapes.length == 0) {
        if (typeof(map._placeMarker) == 'undefined') {
          $('#place_latitude').val('');
          $('#place_longitude').val('');
        };
        $('#place_geometry').val('');
      } else {
        if (typeof(map._placeMarker) != 'undefined' && typeof(map._placeMarker._moved) == 'undefined') {
          var latLng = bounds.getCenter();
          $('#place_latitude').val(latLng.lat());
          $('#place_longitude').val(latLng.lng());
          map._placeMarker.setLatLng(latLng);
        }
        
        // Generate KML for all the shapes on the map.  Async requests are 
        // not ideal, but the Goog is stupid fast, so it should be ok
        $('#place_geometry').val('');
        $.each(map._shapes, function() {
            this.getKml(function(kml) {
            $('#place_geometry').val($('#place_geometry').val() + kml);
          });
        });
      }
    }
    
    function clearShapes(map) {
      $.each(map._shapes, function() {
        this.disableEditing();
        map.removeOverlay(this);
      });
      map._shapes = [];
      updateGeometry(map);
    }
    
    function gPolygonToWKT(polygons) {
      var polygonStrings = [];
      for (var i=0; i < polygons.length; i++) {
        polygonStrings.push('(' + gPolygonToWKTPoints(polygons[i]) + ')');
      };
      
      return "MULTIPOLYGON ((" + polygonStrings.join(',') + '))';
    }
    
    function gPolygonToWKTPoints(polygon) {
      var numPoints = polygon.getVertexCount();
      var pointStrings = [];
      for(var i=0; i < numPoints; i++) { 
        var lat = polygon.getVertex(i).lat(); 
        var lng = polygon.getVertex(i).lng(); 
        pointStrings.push(lng + " "+ lat); 
      }
      return pointStrings.join(',');
    }
    
    function ClearShapesControl() {};
    ClearShapesControl.prototype = new GControl();
    ClearShapesControl.prototype.initialize = function(map) {
      var clearButton = $('<div></div>').css(this._buttonWrapperCSS).append(
        $('<div></div>').css(this._buttonCSS).append(I18n.t('clear_shapes'))
      ).click(function() {
        clearShapes(map);
      });
      
      var addButton = $('<div></div>').css(this._buttonWrapperCSS).append(
        $('<div></div>').css(this._buttonCSS).append(I18n.t('add_shape'))
      ).click(function() {
        addShape(map);
      });
      
      var panel = $('<div></div>').append(
        addButton,
        clearButton
      );
      
      var panelElt = $(panel).get(0);
      map.getContainer().appendChild(panelElt);
      return panelElt;
    }
    ClearShapesControl.prototype.getDefaultPosition = function() {
      return new GControlPosition(G_ANCHOR_TOP_LEFT, new GSize(75, 7));
    }

    ClearShapesControl.prototype._buttonWrapperCSS = {
      'font-family': 'Arial, sans-serif',
      'border-color': 'black',
      'border-width': '1px',
      'border-style': 'solid',
      'background-color': 'white',
      'cursor': 'pointer',
      'float': 'left',
      'margin-right': '5px'
    };
    
    ClearShapesControl.prototype._buttonCSS = {
      padding: '0px 6px',
      'font-weight': 'bold',
      'color': 'black',
      'border-width': '1px',
      'border-style': 'solid',
      'border-top-color': 'white',
      'border-left-color': 'white',
      'border-bottom-color': '#aaa',
      'border-right-color': '#aaa'
    };
    
  </script>