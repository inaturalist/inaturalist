= content_for :title do
  = "#{@guide_taxon.display_name} (#{@guide.title})"
= content_for :extracss do
  :css
    #photos {white-space: nowrap; overflow-x:auto; overflow-y:hidden;}
    #photos img.thumb {max-height:200px;}
    .taxonmap {height: 300px;}
    .bootstrap .modal.imgmodal {border: 0 transparent;}
    .bootstrap .modal.imgmodal img {display: none; max-width: none;}
    .bootstrap .imgmodal .close {
      color: #eee;
      text-shadow: 0 1px 0 #000000;
      float:none;
      opacity: 0.5;
    }
    .bootstrap .imgmodal:hover .close {opacity:1;}
    .bootstrap .imgmodal .close:hover {color:white;}
    .imgmodal .footer {
      position: absolute;
      bottom: 0;
      background-color: rgba(0,0,0,0.5);
      color: white;
      width: 100%;
    }
    .imgmodal .footer .caption { padding: 10px;}
    .imgmodal .controls {
      position: absolute;
      top: 5px;
      right: 10px;
    }
    .imgmodal.zoomed {overflow:hidden;}
    #reuse_guide_taxon_dialog img {max-height: 30px;}
    #photos .guide_photo {position: relative; margin-right: 5px; display:inline-block;}
    #photos .guide_photo img {cursor: zoom-in;}
    #photos .lowerright a {color:#ddd; display:inline-block; width:1em; height:1em;}
    #photos .guide_photo:hover .lowerright a {color:white;}
= content_for :extrajs do
  :javascript
    var GUIDE_TAXON = #{@guide_taxon.to_json(:only => [:id, :guide_id])}
  = javascript_include_tag "underscore.min", "wax.g", "guide_taxa/show"
.container-fluid
  %ul.breadcrumb
    %li
      = link_to t(:guides), guides_path
      %span.divider /
    %li
      = link_to @guide.title, @guide
      %span.divider /
    %li.active= @guide_taxon.display_name
  .row-fluid.stacked
    - if logged_in?
      .btn-grp.pull-right
        = link_to "#reuse_guide_taxon_dialog", "data-toggle" => "modal", :class => "btn" do
          %i.fa.fa-copy
          = t(:copy)
        - if @guide.editable_by?(current_user)
          = link_to t(:edit), edit_guide_taxon_path(@guide_taxon), :class => "btn"
    %h2
      - if @guide_taxon.display_name == @guide_taxon.name
        %em= @guide_taxon.name
      - else
        = @guide_taxon.display_name
    - if @guide_taxon.display_name != @guide_taxon.name
      %em= @guide_taxon.name

  #photos.row-fluid.stacked
    - for guide_photo in @guide_taxon.guide_photos.sort_by(&:position)
      .inlineblock.guide_photo
        = image_tag guide_photo.photo.try_methods(:medium_url, :small_url), :class => "thumb img-rounded", "data-toggle" => "modal", "data-target" => "##{dom_id(guide_photo, "modal")}"
        .lowerright
          = cite(tag: :small) do
            - if guide_photo.native_page_url.blank?
              = guide_photo.attribution
            - else
              = succeed ',' do
                = guide_photo.attribution
              = link_to(guide_photo.native_page_url, guide_photo.native_page_url)
        .imgmodal.modal.fade.hide{:role => "dialog", "aria-hidden" => "true", :id => dom_id(guide_photo, "modal")}
          = image_tag image_url(guide_photo.photo.try_methods(:large_url, :original_url, :medium_url))
          .controls
            %button.close{:type => "button", "data-dismiss" => "modal"} Ã—
          .footer
            .caption
              = guide_photo.description
              .small.attribution
                = guide_photo.attribution
                - unless guide_photo.native_page_url.blank?
                  = surround '(', ')' do
                    = link_to t(:link, :default => "link").downcase, guide_photo.native_page_url
  .row-fluid
    .span8
      - for s in @guide_taxon.guide_sections.sort_by{|gt| gt.position.to_i}
        %h3
          = s.title
          = cite do
            - if s.source_url.blank?
              = s.attribution
            - else
              = succeed ',' do
                = s.attribution
              = link_to(s.source_url, s.source_url)
        = formatted_user_text s.description, compact: true
      - unless @guide_taxon.guide_sections.blank?
        %h3=t :sources_and_credits
        = references
      %h3= t(:more_info_title, default: t(:more_info))
      %ul
        - if @guide_taxon.taxon
          %li= link_to t(:site_taxon_page, :site_name => SITE_NAME_SHORT), @guide_taxon.taxon
        - for tl in @taxon_links.sort_by{|tl| tl.site_title.downcase}
          - if @guide_taxon.eol_page_id && tl.url =~ /eol\.org/
            %li= link_to tl.site_title, "http://eol.org/pages/#{@guide_taxon.eol_page_id}"
          - else
            %li= link_to tl.site_title, tl.url_for_taxon(@guide_taxon.taxon)
    .span4
      - unless @guide_taxon.guide_ranges.blank?
        %h3=t :range_map
        - @guide_taxon.guide_ranges.sort_by(&:position).each do |gr|
          .stacked
            - if gr.medium_url
              = image_tag gr.medium_url, :class => "stacked"
            %p.muted
              %small
                - if gr.source_url.blank?
                  = gr.attribution
                - else
                  = link_to(gr.attribution, gr.source_url)
      - if @guide_taxon.taxon
        %h3
          = SITE_NAME_SHORT
          =t :map
        :ruby
          a = {
            taxon_layers: [ {
              taxon: @guide_taxon.taxon, 
              ranges: true, 
              observations: true,
              places: { disabled: true },
              gbif: { disabled: true }
            } ],
            place_layers: [ { 
              place: @guide.place
            } ],
            latitude: @guide.latitude, longitude: @guide.longitude,
            map_type: @guide.map_type, zoom_level: @guide.zoom_level
          }
        .taxonmap.stacked{setup_map_tag_attrs(a)}
      - unless @machine_tags.blank?
        %table.table.table-bordered.upstacked
          %tbody
            - for predicate, values in @grouped_machine_tags
              %tr
                %th.text-left= predicate.humanize
                %td= values.join(', ')

#reuse_guide_taxon_dialog.modal.fade.hide{:role => "dialog", "aria-hidden" => "true"}
  .modal-header
    %button.close{:type => "button", "data-dismiss" => "modal"} x
    %h3=t :copy_guide_taxon_to
    %p= t 'views.guide_taxa.show.reuse_desc'
  .modal-body
  .modal-footer
    %button.btn{"data-dismiss" => "modal"}=t :close
