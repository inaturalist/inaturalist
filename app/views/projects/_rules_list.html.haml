- for rule in @project.project_observation_rules
  %li= rule.terms
- unless @project.prefers_rule_quality_grade.blank?
  %li=t :must_have_quality_grades, grades: @project.prefers_rule_quality_grade.split(",").map{|g| t( g, default: g )}.join(", ")
- unless @project.prefers_rule_d1.blank?
  %li=t :must_be_observed_after, operand: l( @project.prefers_rule_d1 =~ /\d{4}-\d{2}-\d{2}/ ? Date.parse( @project.prefers_rule_d1 ) : DateTime.parse( @project.prefers_rule_d1 ) )
- unless @project.prefers_rule_d2.blank?
  %li=t :must_be_observed_before, operand: l( @project.prefers_rule_d2 =~ /\d{4}-\d{2}-\d{2}/ ? Date.parse( @project.prefers_rule_d2 ) : DateTime.parse( @project.prefers_rule_d2 ) )
- unless @project.prefers_rule_observed_on.blank?
  %li=t :must_be_observed_on_date, date: l( Date.parse( @project.prefers_rule_observed_on ) )
- unless @project.prefers_rule_month.blank?
  %li
    - months = @project.prefers_rule_month.split(",").map{ |i| I18n.t( "date_format.month.#{ Date::MONTHNAMES[i.to_i].downcase }" ) }
    =t :must_be_observed_in_months, months: months.join( ", " )
- unless @project.prefers_rule_photos.blank?
  %li=t :must_have_photos
- unless @project.prefers_rule_sounds.blank?
  %li=t :must_have_sounds
