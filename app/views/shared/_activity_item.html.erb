<%- 
  item = activity_item || item
  return unless item
  taxon = item.taxon if item.respond_to?(:taxon)
  observation = item.observation if item.respond_to?(:observation)
  user = if item.is_a?(Flag)
    item.resolver
  elsif item.is_a?(ObservationFieldValue)
    item.updater || item.user
  elsif item.respond_to?(:user)
    item.user
  end
  edit_url = case item.class.name
  when "Comment" then edit_comment_path(item)
  when "Identification" then edit_identification_path(item)
  end
  hide_agree ||= false
  no_thumb ||= false
  no_meta ||= false
  context_around ||= nil
  posted_at ||= item.created_at
  posted_at = item.updated_at if item.is_a?(Flag)
  html_class = "#{item.class.name.humanize.underscore}_activity_item item clear stacked"
  item_hidden = item.respond_to?( :hidden? ) && item.hidden?
  viewer_can_see_item = !item_hidden || item.hidden_content_viewable_by?( current_user )
  id_attr = if item.is_a? Comment
    "activity_comment_#{item.uuid}"
  elsif item.is_a? Identification
    "activity_identification_#{item.uuid}"
  else
    dom_id( item, "activity" )
  end
  unless defined? parent_comments_disabled
    parent_comments_disabled = if item.respond_to?( :parent )
      item&.parent&.respond_to?(:prefers_no_comments?) && item&.parent.prefers_no_comments?
    else
      false
    end
  end
-%>
<div id="<%= id_attr  %>" class="<%= html_class %>">
  <div class="item_user column">
    <% if !viewer_can_see_item -%>
      <span class="no-usericon" />
    <% elsif user && !no_thumb -%>
      <%= link_to image_tag(user.icon.url(:thumb), :class => 'usericon'), person_path(user) %>
    <% end -%>
  </div>
  <div class="item_content last column">
    <%- if item.is_a? Identification %>
      <%= render :partial => "identifications/identification", :locals => { 
        :identification => item,
        :taxon => taxon,
        :observation => observation,
        :user => user,
        :hide_agree => hide_agree
      } %>
    <% elsif item.is_a? Flag %>
      <div class="stacked body">
        <div class="stacked">
          <span class="meta"><%= t :originally_flagged_by %></span>
          <%= link_to_user item.user %>: "<%= item.flag %>"
        </div>
        <%= t(:flag_marked_as_resolved_html).html_safe %>
        <% unless item.comment.blank? %>
          <%-
            username = if (u = item.resolver)
              link_to_user(u)
            elsif item.resolver_id.blank?
              @site.preferred_site_name_short
            else
              t(:deleted_user)
            end
          -%>
          <span class="meta"><%= username %> <%= t :said %>,</span>
          "<%= item.comment %>"
        <% end -%>
      </div>
    <% elsif item.is_a? ObservationFieldValue %>
      <div class="stacked body">
        <%= render "observation_fields/observation_field_value", :observation_field_value => item %>
      </div>
    <% elsif item.is_a? ActsAsVotable::Vote %>
      <div class="stacked body">
        <em class="meta nocontent">
          <i class="fa fa-star"></i>
          <%=t :added_to_favorites_html, url: faves_by_login_url(user.login) %>
        </em>
      </div>
    <%- end -%>
    
    <% text = if item.respond_to?(:body) && item.body
        item.body
      elsif item.respond_to?(:description) && item.description
        item.description
      end -%>
    <% unless text.blank? -%>
      <% if !viewer_can_see_item %>
        <div class="readable body content-hidden">
          <p>
            <span
              class="content-hidden"
              data-content="<%= render( partial: "moderator_actions/popover", locals: { item: item } ).to_str %>"
              data-placement="top"
              data-toggle="popover"
            >
              <i class="fa fa-eye-slash" ></i>
              <%= t :content_hidden %>
            </span>
          </p>
        </div>
      <% else %>
        <div class="readable body">
          <%- if context_around && context = text.context_of_pattern(context_around) %>
            <%= formatted_user_text(context) %>
          <% else -%>
            <%= formatted_user_text( text, tags: Observation::ALLOWED_DESCRIPTION_TAGS ) %>
          <% end -%>
        </div>
      <% end %>
    <% end -%>
    
    <% unless no_meta -%>
      <div class="meta">
        <% if viewer_can_see_item %>
          <%=t :posted_by %>
          <%= link_to( truncate( you_or_login( user ).downcase, length: 20 ), person_path( user ) ) %>
        <% end %>
        <span class="when">
          <abbr class="date timeago" title="<%= posted_at.iso8601 %>">
            <%=t :n_ago, :n => time_ago_in_words(posted_at) %>
          </abbr>
        </span>
        <% if item.respond_to?(:flagged?) && item.flagged? && is_curator? && !is_me?( item.try(:user) ) %>
          <%= link_to [item, :flags] do %>
            <i class="fa fa-flag"></i>
            <%=t :flagged_ %>
          <% end %>
        <% end %>
        <% if item_hidden && viewer_can_see_item %>
          <span
            class="content-hidden"
            data-content="<%= render( partial: "moderator_actions/popover", locals: { item: item } ).to_str %>"
            data-placement="top"
            data-toggle="popover"
          >
            <i class="fa fa-eye-slash" ></i>
            <%= t :content_hidden %>
          </span>
        <% end %>
        <span class="comment_actions">
          <%-
            pieces = []
            if is_me?(item.user) && edit_url && !parent_comments_disabled && !item_hidden
              pieces << link_to(t(:edit), edit_url)
            end
            if item.is_a?( Identification ) && is_me?( item.user )
              if item.current?
                pieces << link_to( t(:withdraw), item, method: :delete, id: "delete_comment_#{item.id}_button" )
              else
                pieces << link_to( t(:restore), identification_path( item, identification: { current: true } ), method: :put, data: { loading_click: t(:restoring) } )
              end
            elsif !item_hidden && ( ( item.respond_to?( :deletable_by? ) && item.deletable_by?( current_user ) ) || is_me?( item.user ) )
              pieces << link_to(t(:delete), item,
                          :data => {:confirm => t(:are_you_sure_you_want_to_delete_this)},
                          :method => :delete,
                          :id => "delete_comment_#{item.id}_button")
            end
            if !item.is_a?(Flag) && Flag::TYPES.include?(item.class.name) && current_user
              pieces << link_to(t(:flag), new_flag_path("#{item.class.name.underscore}_id" => item), :class => "flaglink")
            end
            if item.is_a?( Comment ) && ( item_hidden && item.unhideable_by?( current_user ) ) || ( !item_hidden && item.hideable_by?( current_user ) )
              pieces << link_to( t( item_hidden ? :unhide_content : :hide ), hide_comment_path( item ) )
            end
          -%>
          <%= "(#{ pieces.join(' | ') })".html_safe unless pieces.empty? %>
        </span>
      </div>
    <% end -%>
  </div>
</div>
