- content_for :title do
  =t :recent_new_users
- content_for :extracss do
  :css
    #vis {
      width: 100%;
      padding: 0;
      height: 300px;
    }
    #controls-preset {
      width: 50px;
    }
- content_for :extrajs do
  = javascript_include_tag "https://www.gstatic.com/charts/loader.js"
  :javascript
    google.charts.load( "current", {
      language: "#{I18n.locale}",
      packages: ["corechart", "annotationchart"]
    } );
  = javascript_include_tag :stats
  - if @stats
    :javascript
      var STATS_JSON = #{ @stats.to_json.html_safe };
      google.charts.setOnLoadCallback( function() {
        Stats.simpleChart( {
          element_id: "vis",
          chartType: "AnnotationChart",
          chartOptions: {
            colors: ["green", "red", "orange", "purple", "dodgerblue"]
          },
          series: [
            { label: "total new users" },
            { label: "auto spam" },
            { label: "manual spam" },
            { label: "probably spam" },
            { label: "false positives" },
          ],
          data: _.map( STATS_JSON, function( stat ) {
            var localDateString = ( new Date( ) ).toISOString( ).replace( /\d{4}-\d{2}-\d{2}/, stat.date );
            var localDate = new Date( localDateString );
            localDate.setHours( 0 );
            localDate.setMinutes( 0 );
            localDate.setSeconds( 1 );
            return [
              localDate,
              stat.new_users || 0,
              stat.auto_spam || 0,
              stat.manual_spam || 0,
              stat.probable_spam || 0,
              stat.false_positives || 0
            ];
          })
        })
      } );
.container
  .row
    .col-xs-12
      %h2=t :recent_new_users
  .row
    .col-xs-12
      #controls.stacked
        %form.form-inline
          .form-group
            %label{ for: "controls-spammer" }=t :spammer
            = select_tag :spammer, options_for_select( %w(yes no unknown).map{|o| [t( "#{o}_", default: t(o) ), o]}, params[:spammer] || "unknown" ), class: "form-control", id: "controls-spammer", data: { autosubmit: true }
          - if params[:spammer].yesish?
            .form-group
              %label{ for: "controls-flagged-by" }=t :flagged_by
              = select_tag :flagged_by, options_for_select( %w(any auto manual).map{|o| [t( "#{o}_", default: t(o) ), o]}, params[:flagged_by] || "any" ), class: "form-control", id: "controls-flagged-by", data: { autosubmit: true }
          - [:obs, :ids, :description].each do |fp|
            .form-group
              %label{ for: "controls-#{fp}" }=t fp
              = select_tag fp, options_for_select( %w(yes no any).map{|o| [t( "#{o}_", default: t(o) ), o]}, params[fp] || "any" ), class: "form-control", id: "controls-#{fp}", data: { autosubmit: true }
          %label.form-group
            %input{ type: "checkbox", name: "chart", checked: params[:chart].yesish?, data: { autosubmit: true }, value: "yes" }
            =t :chart
          = link_to t(:reset), url_for, class: "btn btn-link"
          .form-group.pull-right
            %label=t :presets
            .btn-group
              = link_to t(:welcome), url_for( obs: "yes" ), class: "btn btn-default"
              = link_to t(:probably_spam), url_for( obs: "no", ids: "no", description: "yes" ), class: "btn btn-default"
  .row
    .col-xs-12
      - if @stats
        #vis
      - if @users.blank?
        .alert.alert-warning=t :no_more_results_found
      - else
        %table.table
          %thead
            %tr
              %th=t :user
              %th=t :created
              %th=t :obs
              %th=t :ids
              %th=t :description
              %th=t :actions
          %tbody
            - for user in @users
              %tr
                %td.nobr
                  = link_to_user user do
                    = user_image( user, size: "thumb" )
                  = link_to_user user
                %td=l user.created_at
                %td= link_to user.observations_count, observations_path( user_id: user.login, verifiable: "any", place_id: "any" ), class: "badge"
                %td= link_to user.identifications_count, identifications_path( user_id: user.login ), class: "badge"
                %td= truncate_with_more( formatted_user_text( user.description ), length: 500 )
                %td
                  - unless user.spammer?
                    = link_to t(:flag_as_spammer), set_spammer_path( user, spammer: true, return_to: url_for_params ), method: :post, class: "btn btn-danger btn-block btn-sm", data: { confirm: t(:are_you_sure?) }
                  - unless user.known_non_spammer?
                    = link_to t(:flag_as_non_spammer), set_spammer_path( user, spammer: false, return_to: url_for_params ), method: :post, data: { confirm: t(:are_you_sure_you_want_to_remove_spammer) }, class: "btn btn-success btn-block btn-sm"
                  - if user.active?
                    = link_to t(:suspend_user), suspend_user_path( user, return_to: url_for_params ), class: "btn btn-warning btn-block btn-sm"
                  - elsif user.suspended?
                    = link_to t(:unsuspend_user), unsuspend_user_path( user, return_to: url_for_params ), class: "btn btn-success btn-block btn-sm"

  - if @users.size == @users.per_page
    .row
      .col-xs-12
        .text-center.stacked
          = link_to t(:view_more), url_for_params( from: @users.last.id ), class: "btn btn-primary"
  - if @users.map(&:observations_count).sum > 0
    .row
      .col-xs-12
        .text-center.stacked
          = link_to t(:view_observations_by_these_users), observations_url( place_id: "any", user_id: @users.map(&:id).join( "," ) ), class: "btn btn-link"
          = link_to t(:identify_observations_by_these_users), identify_observations_url( place_id: "any", user_id: @users.map(&:id).join( "," ) ), class: "btn btn-link"
  .row
    .col-xs-12.text-muted
      %h3=t :about_recent_users
      =t "views.users.recent.recent_users_desc_html"
      %h3=t :definitions
      =t "views.users.recent.definitions_html"


