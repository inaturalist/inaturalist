= render :partial => "shared/by_login_header_bootstrap", :locals => { :model_name => "Profile" }
.row
  .col-sm-4
    - if @selected_user.icon.file?
      %h1= user_image @user, :size => "medium", :class => "img-thumbnail img-responsive"
    - if is_me?(@user)
      %p
        = link_to t(:edit_account_settings_and_profile).html_safe, edit_person_path(current_user), :class => "btn btn-primary btn-lg btn-group-justified"
    = render :partial => 'glance'
    - if logged_in? && (current_user.is_admin? || current_user.is_curator?)
      .row
        .col-md-12
          .dropdown
            %button#dropdownMenu1.btn.btn-default.dropdown-toggle.nav-justified{"data-toggle" => "dropdown", :style => "text-align:left", :type => "button"}
              %span.glyphicon.glyphicon-wrench
              = t :admin_tools, default: 'Admin Tools'
              %span.caret
            %ul.dropdown-menu{:style => "width:100%"}
              - if current_user.is_curator? && !is_me?(@user) && !@user.is_admin? && !@user.is_curator?
                - if @user.active?
                  %li
                    = link_to t(:suspend_user), suspend_user_path(@user)
                - else
                  %li
                    = link_to t(:unsuspend_user), unsuspend_user_path(@user)
              - if current_user.is_curator? && !@user.is_admin?
                - if @user.is_curator?
                  %li
                    = link_to t(:remove_curator_status), remove_role_path(@user, :role => "curator"), :method => :delete
                - else
                  %li
                    = link_to t(:make_curator), add_role_path(@user, :role => "curator"), :method => :post
              - if is_admin?
                %li
                  = link_to t(:curate_user), user_detail_admin_path( id: @user.id )
              - if current_user.is_curator?
                %li.divider{:role => "separator"}
                - unless is_me?(@user) || @user.is_admin?
                  - unless @user.spammer?
                    %li
                      = link_to t(:flag_as_spammer), set_spammer_path(@user, spammer: true), method: :post
                  - unless @user.known_non_spammer?
                    %li
                      = link_to t(:flag_as_non_spammer), set_spammer_path(@user, spammer: false), method: :post, data: { confirm: t(:are_you_sure_you_want_to_remove_spammer) }
                %li
                  = link_to t(:flags_on_users_content, user: @user.login), flags_path( flagger_type: "any", resolved: "any", flags: ["spam", "copyright infringement", "inappropriate", "other"], user_id: @user.login )
  .col-sm-8{:style => "background-color:white"}
    %h1
      = @user.name.blank? ? @user.login : @user.name
      - admin_site = @user.site_admins.live.first.try(:site)
      - if @user.is_admin? || @user.is_curator? || admin_site
        %small.role
          - info_link = help_path(anchor: "curators")
          - if @user.is_admin?
            = t(:site_staff, site_name: "iNaturalist")
          - elsif admin_site
            - site_link = link_to( admin_site.name, admin_site.url, class: "site")
            = raw t(:site_site_admin, site_name: site_link)
            - if admin_site.place
              = " (#{t("places_name.#{admin_site.place.name.parameterize.underscore}")})"
            - info_link = wiki_page_url( "network" )
          - else
            = t(:curator)
          = link_to info_link do
            %span.glyphicon.glyphicon.glyphicon-question-sign
    %p#significant-dates
      %span.date
        %i.fa.fa-calendar-plus-o
        =t :joined_with_date, date: l( @user.created_at.to_date, format: :short_with_year )
      %span.date
        %i.fa.fa-clock-o
        - if @user.last_active
          =t :last_active_with_date, date: l( @user.last_active, format: :short_with_year )
        - else
          =t :last_active_with_date, date: t(:unknown)
      - if @donor_since
        - monthly_supporters_url_for_page = monthly_supporters_url( utm_campaign: "monthly-supporter-profile", utm_medium: "web", utm_source: @site.domain, utm_content: "inline-link", utm_term: @user.login )
        %span.monthly-supporter
          = link_to monthly_supporters_url_for_page do
            %i.icon-logomark
          =t :monthly_supporter_since_date_html, date: l( @donor_since, format: :month_year ), url: monthly_supporters_url_for_page

    #description
      - if @user.description.blank?
        - if is_me?(@selected_user)
          #nodescription.well
            %p
              = link_to t(:tell_the_world_a_little_about_yourself).html_safe, generic_edit_user_path, :class => "btn btn-primary btn-default"
            .more
              = t(:do_you_study_nematodes_worlds_foremost_expert_barnacle)
            = form_for @selected_user, :html => {:style => "display: none"} do |f|
              = f.text_area :description, placeholder: t(:describe_your_interest_in_nature), :class => "stacked form-control"
              .actions
                = f.submit t(:save), :class => "default button", "data-loading-click" => true
                %a.button.cancellink{:href => "#"}= t(:cancel)
        - else
          = t(:user_is_a_naturalist, :user => @user.login)
      - else
        - if @user.spammer.nil? && ( is_curator? || is_me?( @user ) )
          .alert.alert-warning
            =t :profile_visibility_desc, site_name: @site.name
        - if @user.known_non_spammer? || is_curator? || is_me?( @user )
          - description = formatted_user_text( @user.description )
          %p.lead
            = stripped_first_paragraph_of_text( description, "\n\n" )
          = remaining_paragraphs_of_text( description, "\n\n" )
    - if orcid_provider = @user.has_provider_auth( "orcid" )
      #elsewhere
        - orcid_uri = "https://orcid.org/#{orcid_provider.provider_uid}"
        = link_to image_tag( "ORCIDiD_iconvector.svg", class: "orcid-icon" ), orcid_uri
        = link_to orcid_uri, orcid_uri
    %h3.page-header
      = t(:following_x_people, :count => @user.followees.count)
    - unless @followees.blank?
      .row
        - @followees[0..3].each do |friend|
          = render(:partial => 'followees', :locals => {:friend => friend})
      - if @followees.count > 4
        #followee-row.row
          - @followees[4..7].each do |friend|
            = render(:partial => 'followees', :locals => {:friend => friend})
      %p#view_more_btn_container
        = link_to t(:view_all), following_by_login_path(@user.login), :class => "btn btn-sm btn-default"
    - else
      - if is_me?(@user)
        %p= raw t(:youre_not_following_anyone, observations_path: observations_path, people_path: people_path )
      - else
        %p
          = @user.login
          = t(:is_not_following_anyone).downcase
    - unless @favorite_listed_taxa.blank?
      #favorites
        %h3.page-header= t :favorite_taxa, default: 'Favorite Taxa'
        .row
          - for listed_taxon in @favorite_listed_taxa[0..3]
            = render(:partial => 'favorites', :locals => {:listed_taxon => listed_taxon})
        - if @favorite_listed_taxa.count > 4
          .row
            - for listed_taxon in @favorite_listed_taxa[4..7]
              = render(:partial => 'favorites', :locals => {:listed_taxon => listed_taxon})
        %p#view_more_btn_container
          = link_to t(:view_all), @favorites_list, :class => "btn btn-sm btn-default"
    - if @favorites_list.blank? && is_me?(@selected_user)
      .well{:style => "text-align: center;"}
        = t(:want_to_show_off_some_of_your_favorite_taxa)
        = link_to t(:create_a_list), new_list_path(:title => t(:favorites))
        = t(:titled_favorites_and_the_most_recent_additions)
