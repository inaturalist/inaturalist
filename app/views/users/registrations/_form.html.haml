- f = builder
- u = user
- child ||= false
= errors_for_hidden_fields u, visible_fields: [:email, :login, :password, :password_confirmation, :birthday, :recaptcha]
.form-group.text-field.email
  = f.text_field :email, autocorrect: "off", autocapitalize: "off", required: true, placeholder: t( :email ), type: "email", class: "form-control"
  - unless u.errors[:email].blank?
    .error= formatted_error_sentence_for( u, :email )
.form-group.text-field.username
  = f.text_field :login, autocorrect: "off", autocapitalize: "off", required: true, placeholder: t( :username ), class: "form-control"
  - unless u.errors[:login].blank?
    .error= formatted_error_sentence_for( u, :login )
.form-group.text-field.password
  = f.password_field :password, class: "text form-control", required: true, placeholder: t(:password)
  - unless u.errors[:password].blank?
    .error= formatted_error_sentence_for( u, :password )
.form-group.text-field.password-confirmation
  = f.password_field :password_confirmation, class: "text form-control", required: true, placeholder: t(:password_confirmation)
  - unless u.errors[:password_confirmation].blank?
    .error= formatted_error_sentence_for( u, :password_confirmation )
- if child
  .form-group.text-field.birthday
    = f.text_field :birthday, class: "text form-control date-picker", required: true, placeholder: t(:birthday)
    - unless u.errors[:birthday].blank?
      .error= formatted_error_sentence_for( u, :birthday )
- if @site.using_recaptcha?
  .form-group.recaptcha
    .g-recaptcha{ data: { sitekey: @site.google_recaptcha_key, callback: "recaptchaCallback" }, style: "text-align: center" }
    - if u.errors && !u.errors[:recaptcha].blank?
      .error= u.errors[:recaptcha].to_sentence
= render "users/registrations/licensing", f: f, child: child
= render "users/registrations/pi_consent", f: f, child: child
= render "users/registrations/data_transfer_consent", f: f, child: child
= render "users/registrations/tos_privacy_guidelines", f: f
.form-group.hidden
  = f.select :time_zone, ActiveSupport::TimeZone.all.sort.map{|tz| [tz.to_s, tz.name, { "data-tz-name": tz.tzinfo.name } ]}, { include_blank: true }, { class: "time_zone_select" }
