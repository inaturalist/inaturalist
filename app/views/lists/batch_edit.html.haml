- if @list.is_a?(CheckList) && @list.is_default?
  - @list_title = display_list_title( @list )
- else
  - @list_title = truncate( @list.title, length: 85 )

- content_for(:title) do
  =t(:batch_edit_taxa_for_x_html, :x => @list_title)

- content_for(:extracss) do
  :css
    td { vertical-align:top;}
    .listed_taxon_row input.taxon_name {width:250px;}
    textarea.text {width: 200px; height:16px;}
    .message {display:none;}
    .error tr.message {display:table-row;}
    .error tr:first-child td {border-bottom: 0 transparent;}
    .message td {text-align:center;}
    .occurrence_status, .establishment_means {display:none;}
    .check_list .occurrence_status, .check_list .establishment_means {display:table-cell;}
    .selected {background-color: lightyellow;}
    thead {background-color:white;}
    thead.sticky {position:fixed; top: 0; z-index: 100;}

    th.check, td.check { width: 17px;}
    th.taxon, td.taxon { width: 264px;}
    th.desc, td.desc { width: 214px;}
    th.occurrence_status, td.occurrence_status { width: 109px;}
    th.establishment_means, td.establishment_means { width: 109px;}
    th.actions, td.actions { width: 150px;}
- content_for :extrajs do
  = javascript_include_tag 'jquery/plugins/jquery.labelize', 'lists/batch_edit', 'jquery/plugins/waypoints.min'


#pageheader
  %h2=t :batch_edit_taxa_for_x_html, :x => link_to(@list_title, @list)

%table{:class => @list.type.to_s.underscore}
  %thead
    %tr
      %th.check
      %th.taxon=t :taxon
      %th.desc=t :description
      %th.occurrence_status=t :occurrence_status
      %th.establishment_means=t :establishment_means
      %th.actions
    %tr
      %th.meta{:colspan => 3}
        =t :select
        = link_to_function t(:all), "$(this).parents('table').find('input[type=checkbox]').selectRows(true)"
        |
        = link_to_function t(:none), "$(this).parents('table').find('input[type=checkbox]').selectRows(false)"
        |
        = link_to_function t(:with_errors), "$(this).parents('table').find('.error input[type=checkbox]').selectRows(true)"
        %span.meta
          = surround '(', ')' do
            %span.count 0
            =t(:selected)
      %th.occurrence_status
        .nobr
          = select_tag :occurrence_status_level, options_for_select(ListedTaxon::OCCURRENCE_STATUS_LEVELS.invert.to_a.sort_by(&:last).reverse.map{|k,v| [t("occurrence_status_levels.#{k.downcase}", :default => k).downcase, v]}), :include_blank => t(:unknown)
          %span{:class => "occurrence_tip_target description helptip", :rel => "#occurrence_tip"}
        = link_to_function "&darr; #{t(:apply_to_selected)}".html_safe, "applyOccurrenceStatus()", :class => "small nobr"
      %th.establishment_means
        .nobr
          = select_tag :establishment_means, options_for_select(ListedTaxon::ESTABLISHMENT_MEANS.map{|em| [t("establishment.#{em.downcase}", :default => em).downcase, em]}), :include_blank => t(:unknown)
          %span{:class => "establishment_tip_target description helptip", :rel => "#establishment_tip"}
        = link_to_function "&darr; #{t(:apply_to_selected)}".html_safe, "applyEstablishmentMeans()", :class => "small nobr"
      %th.buttonrow.smallbuttons.inline.nobr
        = link_to_function "&darr; #{t :save}".html_safe, "saveSelected()", :class => "default button"
        = link_to_function "&darr; #{t :remove}".html_safe, "removeSelected()", :class => "delete button"
    = render :partial => 'batch_edit_row', :collection => @listed_taxa

- if @listed_taxa.respond_to?(:total_pages)
  = will_paginate @listed_taxa
