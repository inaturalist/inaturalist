:ruby
  @title = if @object.is_a?( Taxon )
    t(:flag_for_taxon_title_html, title: link_to( render( "taxa/taxon.txt", taxon: @object ), @object ) )
  elsif @object.is_a?( Observation )
    t(:flag_for_observation_title_html, title: link_to( @object.to_plain_s, @object ) )
  elsif @object.respond_to?( :title ) || @object.respond_to?( :name )
    t( "flag_for_#{@object.class.name.underscore}_title_html", title: link_to( @object.try_methods(:title, :name), @object ) )
  else
    t( "flag_for_#{@object.class.name.underscore}_id_html", id: @object.id, url: url_for(@object) )
  end
- content_for(:title) do
  = strip_tags @title
- content_for :extrajs do
  :javascript
    $("#comment_body").textcompleteUsers( );
.container
  .row
    .col-xs-12
      .breadcrumbs
        %strong
          = link_to t(:back_to_flags_html), url_for_referrer_or_default( @object )
        .pull-right
          - if @object.is_a?( Comment )
            = link_to t(:view_moderation_history_for_this_comment), comment_flags_url( comment_id: @object.id )
            &middot;
          = link_to t(:view_all_flags), flags_url
      %h2= @title
  .row
    .col-xs-12
      - if [Flag::SPAM, Flag::COPYRIGHT_INFRINGEMENT].include?( @flag.flag )
        .alert.alert-warning
          =t "views.flags.show.flags_that_should_not_be_resolved_desc_html"
      %table.table
        %thead
          %tr
            %th=t :created
            %th=t :flag_object
            %th=t :flagger
            %th=t :reason
            %th=t :resolved_by
            %th=t :flag_resolution
        %tbody
          %tr
            %td=l @flag.created_at
            %td= link_to @object.to_plain_s, @object
            %td
              - if @flag.user
                = link_to @flag.user.login, @flag.user
              - elsif @flag.user_id == 0
                = @site.site_name_short
              - else
                =t :deleted_user
            %td=formatted_user_text @flag.flag
            %td
              - unless @flag.resolver.nil?
                = link_to @flag.resolver.login, @flag.resolver
              - else
                =t :not_resolved
            %td.nobr.form-inline
              - if is_curator?
                = form_for( @flag, action: "update", html: { class: "inlineblock" } ) do |f|
                  = f.text_field :comment, class: "form-control"
                  = f.hidden_field :resolver_id, value: current_user.id
                  = f.hidden_field :resolved, value: true
                  = hidden_field_tag :return_to, url_for( @flag )
                  = f.submit t(:resolve), class: "btn btn-success"
              - else
                = formatted_user_text @flag.comment
              - if is_me?( @flag.user )
                = link_to @flag, class: "btn btn-link", data: { confirm: t(:you_sure_delete_flag?) }, method: :delete do
                  %i.fa.fa-trash
                  = t(:delete)
  .row
    .col-xs-8
      = render "comments/comments", parent: @flag
      - unless is_me?( @flag.user )
        .upstacked
          = render "subscriptions/subscription", resource: @flag
