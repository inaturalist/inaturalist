- content_for(:title) do
  - @title = @user ? t(:flags_on_users_content, user: @user.login) : t(:flags)
- content_for(:extrajs) do
  :javascript
    $( document ).ready( function( ) {
      $( "form #user_name" ).userAutocomplete( { idEl: $( "#user_id" ) } );
      $( "form #flagger_name" ).userAutocomplete( { idEl: $( "#flagger_user_id" ) } );
      $( "form #flagger_name" ).on( "focus", function( ) {
        $( "form input[name='flagger_type']" ).click( );
      } );
      $( "form #resolver_name" ).userAutocomplete( { idEl: $( "#resolver_user_id" ) } );
      $( "form #taxon_name" ).taxonAutocomplete( { idEl: $( "#taxon_id" ) } );
      $( "form select[name='flaggable_type']" ).change( function( ) {
        if ( $( this ).val( ) === "all" ) {
          $( "form .content-deleted" ).hide( );
        } else {
          $( "form .content-deleted" ).show( ).removeClass( "hidden" );
        }
        $( "form select[name='deleted']" ).val( "any" );
      } );
    });
- content_for :extracss do
  :css
    #controls label { display: block; }
    #controls .flagger-type { padding-left: 20px;}
    #controls input[type=search]::-webkit-search-cancel-button {
      -webkit-appearance: searchfield-cancel-button;
    }
    td.actions { min-width: 150px; }
    .reason, .resolution { max-width: 300px; overflow: hidden; }
    .table img { max-width: 100%; }
    .table blockquote { font-size: 14px; }
.container
  .row
    .col-xs-12
      %h2= @title
      %p.text-muted= t(:flags_explanation, site_name: @site.name)
  .row
    .col-xs-12
      #controls.well
        = form_tag( flags_path, method: "get" ) do
          .row
            .col-xs-3
              .form-group
                %label=t :flagger
                .flagger-type
                  %label.radio
                    %input{ type: "radio", name: "flagger_type", value: "any", checked: @flagger_type == "any" }
                    =t :any_
                  %label.radio
                    %input{ type: "radio", name: "flagger_type", value: "auto", checked: @flagger_type == "auto" }
                    =t :automatic_short
                  %label.radio
                    %input{ type: "radio", name: "flagger_type", value: "user", checked: @flagger_type == "user" }
                    =t :user
                    .form-group
                      %input#flagger_name.form-control{ type: "search", name: "flagger_name", value: @flagger ? @flagger.login : nil, placeholder: t(:start_typing_someones_name) }
                      %input#flagger_user_id.form-control{ type: "hidden", name: "flagger_user_id", value: @flagger ? @flagger.id : nil }
            .col-xs-3
              %label#user-form-group.form-group
                =t :content_author
                %input#user_name.form-control{ type: "search", name: "user_name", value: @user ? @user.login : nil, placeholder: t(:start_typing_someones_name) }
                %input#user_id.form-control{ type: "hidden", name: "user_id", value: @user ? @user.id : nil }
              .form-group
                %label=t :content_type
                :ruby
                  flaggable_type_options = options_for_select( ( ["all"] + Flag::TYPES.sort ).map {|t|
                    [I18n.t( t, default: t ), t]
                  }, @flaggable_type )
                = select_tag :flaggable_type, flaggable_type_options, class: "select form-control"
              - if @flaggable_type == "Taxon"
                %label.form-group
                  =t :taxon
                  %input{ type: "text", name: "taxon_name", id: "taxon_name", placeholder: t(:start_typing_taxon_name, default: "" ), class: "form-control" }
                  %input{ type: "hidden", name: "taxon_id", id: "taxon_id", value: @taxon.try(:id) }
              %div{ class: "content-deleted form-group #{%w(yes no).include?( @deleted ) ? "" : "hidden"}"}
                %label=t :content_deleted
                :ruby
                  deleted_options = options_for_select( %w(any yes no).map {|t|
                    [I18n.t( t, default: t ), t]
                  }, @deleted )
                = select_tag :deleted, deleted_options, class: "select form-control"
            .col-xs-3
              %label=t :reason
              .form-group
                - [Flag::SPAM, Flag::COPYRIGHT_INFRINGEMENT, Flag::INAPPROPRIATE, "other"].each do |f|
                  %label
                    %input{ type: "checkbox", name: "flags[]", value: f, checked: @flag_types.include?( f ) }
                    =t f.parameterize.underscore
              .form-group
                %input.form-control{ type: "search", name: "reason_query", value: @reason_query, placeholder: t(:search_reasons, default: "Search Reasons") }
            .col-xs-3
              .form-group
                %label=t :resolved
                :ruby
                  resolved_options = options_for_select( %w(any yes no).map {|t|
                    [I18n.t( t, default: t ), t]
                  }, @resolved )
                = select_tag :resolved, resolved_options, class: "select form-control"
              %label.form-group
                =t :resolver
                %input#resolver_name.form-control{ type: "search", name: "resolver_name", value: @resolver ? @resolver.login : nil, placeholder: t(:start_typing_someones_name) }
                %input#resolver_user_id.form-control{ type: "hidden", name: "resolver_user_id", value: @resolver ? @resolver.id : nil }
          .row
            .col-xs-12
              = submit_tag t(:filter), class: "btn btn-primary"
              = link_to t(:reset_filters_short), url_for, class: "btn btn-link"
              = hidden_fields_for_params( without: [:flaggable_type, :flag, :flags, :user_id, :user_name, :flagger_type, :flagger_name, :flagger_id, :resolved, :resolver_name, :resolver_user_id, :taxon_name, :taxon_id, :reason_query, :page, :deleted] )
  .row
    .col-xs-12
      = render partial: 'flag_table', locals: { flags: @flags, site: @site }
  .row
    .col-xs-12
      - if @flags.respond_to?(:total_pages)
        = will_paginate @flags, url_helper: :flags_path, renderer: INatLinkRenderer
