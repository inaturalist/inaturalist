- flaggable = flag.flaggable
- flaggable_class = flaggable.class
- flaggable = flaggable.becomes( Photo ) if flaggable.is_a?( Photo )
- flaggable = flaggable.becomes( Sound ) if flaggable.is_a?( Sound )
%div{ class: "flag #{"resolved" if flag.resolved?}" }
  %table.table.table-condensed.table-bordered.plain
    %tbody
      %tr
        %th=t :flagger
        %td
          - if flag.user
            = link_to_user flag.user
          - else
            = @site.site_name_short
      %tr
        %th=t :flag_object
        %td
          = link_to flaggable.respond_to?( :to_plain_s ) ? flaggable.to_plain_s : t( flag.flaggable_type ), flaggable
          - if !flaggable && flag.flaggable_parent
            %br
            = surround "[", "]" do
              =t :bold_label_colon_value_html, label: t(:parent), value: link_to( flag.flaggable_parent.to_plain_s, flag.flaggable_parent )
      %tr
        %th=t :reason
        %td= "\"#{flag.flag}\""
  .small.meta.ui
    = link_to flag do
      %span.count= flag.comments.size
      = t(:comments).downcase
    &middot;
    = link_to t(:details), flag
    - if is_curator?
      &middot;
      - if flag.resolved?
        %strong= link_to t(:unresolve), flag
      - else
        %strong= link_to t(:resolve), flag
    - if is_admin?
      &middot;
      = link_to t(:delete), flag, data: { confirm: t(:you_sure_delete_flag?) }, method: :delete
- if flag.resolved?
  .resolution.description
    - if flag.comment.blank?
      %strong
        = t :resolved_by
        - if flag.resolver_id <= 0
          iNaturalist
        - else
          = link_to_user flag.resolver
    - else
      %strong
        = succeed ":" do
          = t :resolved_by
          - if flag.resolver_id && flag.resolver_id <= 0
            iNaturalist
          - else
            = link_to_user flag.resolver
      = surround "\"", "\"" do
        = formatted_user_text( flag.comment, skip_simple_format: true )
