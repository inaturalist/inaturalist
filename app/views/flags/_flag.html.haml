- flaggable = flag.flaggable
- flaggable_class = flaggable.class
- flaggable = flaggable.becomes( Photo ) if flaggable.is_a?( Photo )
- flaggable = flaggable.becomes( Sound ) if flaggable.is_a?( Sound )
%div{ class: "flag #{"resolved" if flag.resolved?}" }
  %table.table.table-condensed.table-bordered.plain
    %tbody
      %tr
        %th=t :flagger
        %td
          - if flag.user
            = link_to_user flag.user
          - else
            = @site.site_name_short
      %tr
        %th=t :flag_object
        %td
          = link_to flaggable.respond_to?( :to_plain_s ) ? flaggable.to_plain_s : t( flag.flaggable_type ), flaggable
      %tr
        %th=t :reason
        %td= "\"#{flag.flag}\""
  .small.meta.ui
    = link_to flag do
      %span.count= flag.comments.size
      = t(:comments).downcase
    &middot;
    = link_to t(:details), flag
    - if is_curator?
      &middot;
      %strong= link_to t(:resolve), flag
    - if is_me?(flag.user) || is_curator?
      &middot;
      = link_to t(:delete), flag, data: { confirm: t(:you_sure_delete_flag?) }, method: :delete
- if flag.resolved? && !flag.comment.blank?
  .resolution.description
    %strong
      = succeed ":" do
        - if flag.resolver
          = t :resolved_by
          = link_to flag.resolver.login, flag.resolver
        - else
          = t :resolved
    = surround "\"", "\"" do
      = formatted_user_text( flag.comment, skip_simple_format: true )
