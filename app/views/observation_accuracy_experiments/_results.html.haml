- font_family = ( current_user && current_user.is_admin? && current_user.in_test_group?( "font" ) ) ? "Lato" : "Whitney"
.row
  .col-xs-12
    %p
      - if @experiment.validator_deadline_date > Time.now
        =t :observation_accuracy_experiment_as_observations
      - else
        =t :observation_accuracy_experiment_our_accuracy_estimate, percent: "#{@stats[:correct].round}%"
      - if @tab == "research_grade_results"
        %br
        =t :observation_accuracy_experiment_our_goak
    %svg{viewBox: "0 0 920 140", preserveAspectRatio: "xMinYMin meet"}
      %g{transform: "translate( 70, 20 )"}
        - if @tab == "research_grade_results"
          %g.axis
            %line.dashed-line{x1: "#{95 * 8}", x2: "#{95 * 8}", y1: "-10", y2: "#{30 * 3}"}
        %g.y.axis
          - %w(correct uncertain incorrect precision).each_with_index do | label, index |
            %g.tick{transform: "translate( 0, #{10 + 20 * index} )", style: "opacity: 1;"}
              %text{dy: ".2em",x: "-70",y: "-2",style: "text-anchor: start; font-size: #{label == "precision" ? 14 : 10}px; font-family: #{font_family}, 'Trebuchet MS', Arial, sans-serif; line-height: 1.6em;"}
                :ruby
                  observation_accuracy_experiment_label = case label
                  when "correct"
                    t :observation_accuracy_experiment_correct
                  when "uncertain"
                    t :observation_accuracy_experiment_uncertain
                  when "incorrect"
                    t :observation_accuracy_experiment_incorrect2
                  when "precision"
                    t :observation_accuracy_experiment_precision
                  end
                = observation_accuracy_experiment_label
          %text{dy: ".2em", x: "-70", y: "-10", style: "text-anchor: start; font-size: 14px; font-family: #{font_family}, 'Trebuchet MS', Arial, sans-serif; line-height: 1.6em;"}=t :observation_accuracy_experiment_accuracy
        %g.x.axis{transform: "translate( 0, 80 )"}
          - ( 0..10 ).each do | tick_value |
            - tick_position = ( 10 - tick_value ) * 80
            %g.tick{transform: "translate( #{tick_position}, 0 )", style: "opacity: 1;"}
              %line{y2: "6", x2: "0"}
              %text{dy: ".71em", y: "9", x: "0", style: "text-anchor: middle;"} #{100 - tick_value * 10}%
        %path.domain{d: "M0,80H#{( 10 * 80 ).to_i}", stroke: "black"}
        - @stats.each do | key, value |
          - next if key == :sample_size
          %rect{class: "stat #{key}", x: "0", height: "15", width: "#{value * 8}", y: "#{20 * @stats.keys.index( key )}"}
          - if @tab == "research_grade_results"
            %rect{x: "#{value * 8 + 10}", y: "#{20 * @stats.keys.index( key )}", width: "30", height: "18", style: "fill: white;"}
          %text{dy: ".71em", y: "#{20 * @stats.keys.index( key )+2}", x: "#{value * 8 + 25}", style: "text-anchor: middle;"}
            = "#{value.round}%"
.row
  .col-md-12
    %h4
      =t :observation_accuracy_experiment_accuracy_results
.row
  .col-md-10
    %p
      - if @explorable
        =t( :observation_accuracy_experiment_click_on_bars )
        ="&nbsp;".html_safe
      - else
        =t( :observation_accuracy_experiment_bars_will )
        ="&nbsp;".html_safe
      %span.sampleSize=t :observation_accuracy_experiment_sample_size, number: @stats[:sample_size]
  .col-md-2.text-end
    %button.btn.btn-primary.toggle-button{type: "button"}=t :observation_accuracy_experiment_show_frequency
.row
  .col-md-12
    - @data.each_pair do | key, barplot_data |
      - scale_factor = @ylims[key.to_sym] / 100
      - if scale_factor > 0
        .barplot-container
          %h5
            :ruby
              chart_title = case key
              when "quality_grade"
                t :observation_accuracy_experiment_quality_grade
              when "continent"
                t :observation_accuracy_experiment_continent
              when "year"
                t :observation_accuracy_experiment_year
              when "iconic_taxon_name"
                t :observation_accuracy_experiment_iconic_taxon_name
              when "taxon_observations_count"
                t :observation_accuracy_experiment_taxon_observations_count
              when "taxon_rank_level"
                t :observation_accuracy_experiment_taxon_rank_level
              end
            = chart_title
          %svg{width: "#{50 + 54 * barplot_data.count}", height: "150"}
            %g{transform: "translate( 40, 10 )"}
              %g.y.axis
                - ( 0..5 ).each do | tick_value |
                  - tick_position = tick_value * 20
                  %g.tick{transform: "translate( 0, #{tick_position} )", style: "opacity: 1;"}
                    %line{x2: "-6", y2: "0"}
                    %text{
                      class: "ytext",
                      dy: ".32em",
                      x: "-9",
                      y: "0",
                      style: "text-anchor: end;",
                      data: {scalefactor: "#{scale_factor}"}
                    } #{100 - tick_value * 20}%
                %path.domain{d: "M-6,0H0V100H-6"}
              %g.x.axis{transform: "translate( 0, 100 )"}
                - barplot_data.keys.each_with_index do | label, index |
                  %g.tick{transform: "translate( #{35 + 54 * index},0 )", style: "opacity: 1;"}
                    %line{y2: "6", x2: "0"}
                    %text{dy: ".71em", y: "9", x: "0", style: "text-anchor: middle;"}
                      :ruby
                        bar_label = case key
                        when "taxon_rank_level"
                          case get_rank_and_parent( label )
                          when "stateofmatter"
                            truncate( t( "ranks.stateofmatter", default: "" ), length: 8, omission: "..." )
                          when "phylum_kingdom"
                            "#{t( "ranks.phylum" )[0..1].capitalize}.-#{t( "ranks.kingdom" )[0..1].capitalize}"
                          when "class_phylum"
                            "#{t( "ranks.class" )[0..1].capitalize}.-#{t( "ranks.phylum" )[0..1].capitalize}"
                          when "order_class"
                            "#{t( "ranks.order" )[0..1].capitalize}.-#{t( "ranks.class" )[0..1].capitalize}"
                          when "family_order"
                            "#{t( "ranks.family" )[0..1].capitalize}.-#{t( "ranks.order" )[0..1].capitalize}"
                          when "genus_family"
                            "#{t( "ranks.genus" )[0..1].capitalize}.-#{t( "ranks.family" )[0..1].capitalize}"
                          when "species_genus"
                            "#{t( "ranks.species" )[0..1].capitalize}.-#{t( "ranks.genus" )[0..1].capitalize}"
                          when "species"
                            truncate( t( "ranks.species", default: "" ), length: 8, omission: "..." )
                          when "subspecies"
                            truncate( t( "ranks.subspecies", default: "" ), length: 8, omission: "..." )
                          end
                        when "continent"
                          continent_label = case label
                          when "Africa"
                            t( "places_name.africa" )
                          when "Asia"
                            t( "places_name.asia" )
                          when "Europe"
                            t( "places_name.europe" )
                          when "North America"
                            t( "places_name.north_america" )
                          when "Oceania"
                            t( "places_name.oceania" )
                          when "South America"
                            t( "places_name.south_america" )
                          when "none" 
                            t :none
                          end
                          truncate( continent_label, length: 8, omission: "..." )
                        when "quality_grade"
                          truncate( t( label ), length: 8, omission: "..." )
                        else
                          label
                        end
                      = bar_label
              - barplot_data.values.each_with_index do | group, index |
                - accumulated_height = 0
                - group.each_with_index do | item, sub_index |
                  %a{href: @explorable ? observations_path( verifiable: "any", place_id: "any", id: item[:ids].join( "," ) ) : "#"}
                    - sub_label = %w[incorrect uncertain correct][sub_index]
                    %rect{
                      class: "acc #{sub_label} #{key}_#{barplot_data.keys[index].to_s.gsub(/[>. ]/, '_')}",
                      x: "#{10 + 54 * index}",
                      width: "50",
                      y: "#{accumulated_height}",
                      altheight: "#{item[:altheight]}",
                      height: "#{item[:height]}",
                      onmousemove: "showTooltip( evt, '#{sub_label}: #{item[:height]}%' );",
                      onmouseout: "hideTooltip();",
                      data: {altheight: item[:altheight], height: item[:height], scalefactor: "#{scale_factor}"}}
                    - accumulated_height += item[:height]
              - if @tab == "research_grade_results"
                %g.axis
                  %line.dashed-line.acc{x1: "0", x2: "#{10 + 54 * barplot_data.count}", y1: "5", y2: "5"}
.row
  .col-xs-12
    %h4 Precision results by subset
    - @precision_data.each_pair do | key, precision_bar |
      - scale_factor = @ylims[key.to_sym] / 100
      - if scale_factor > 0
        .barplot-container
          %h5
            :ruby
              precision_chart_title = case key
              when "quality_grade"
                t :observation_accuracy_experiment_quality_grade
              when "continent"
                t :observation_accuracy_experiment_continent
              when "year"
                t :observation_accuracy_experiment_year
              when "iconic_taxon_name"
                t :observation_accuracy_experiment_iconic_taxon_name
              when "taxon_observations_count"
                t :observation_accuracy_experiment_taxon_observations_count
              when "taxon_rank_level"
                t :observation_accuracy_experiment_taxon_rank_level
              end
            = precision_chart_title
          %svg{width: "#{50 + 54 * precision_bar.count}", height: "150"}
            %g{transform: "translate( 40, 10 )"}
              %g.y.axis
                - ( 0..5 ).each do | tick_value |
                  - tick_position = tick_value * 20
                  %g.tick{transform: "translate( 0,#{tick_position} )", style: "opacity: 1;"}
                    %line{x2: "-6", y2: "0"}
                    %text{dy: ".32em", x: "-9", y: "0", style: "text-anchor: end;"} #{100 - tick_value * 20}%
                %path.domain{d: "M-6,0H0V100H-6"}
              %g.x.axis{ transform: "translate( 0, 100 )" }
                - precision_bar.keys.each_with_index do | label, index |
                  %g.tick{transform: "translate( #{35 + 54 * index},0 )", style: "opacity: 1;"}
                    %line{y2: "6", x2: "0"}
                    %text{dy: ".71em", y: "9", x: "0", style: "text-anchor: middle;"}
                      :ruby
                        bar_label = case key
                        when "taxon_rank_level"
                          case get_rank_and_parent( label )
                          when "stateofmatter"
                            truncate( t( "ranks.stateofmatter", default: "" ), length: 8, omission: "..." )
                          when "phylum_kingdom"
                            "#{t( "ranks.phylum" )[0..1].capitalize}.-#{t( "ranks.kingdom" )[0..1].capitalize}"
                          when "class_phylum"
                            "#{t( "ranks.class" )[0..1].capitalize}.-#{t( "ranks.phylum" )[0..1].capitalize}"
                          when "order_class"
                            "#{t( "ranks.order" )[0..1].capitalize}.-#{t( "ranks.class" )[0..1].capitalize}"
                          when "family_order"
                            "#{t( "ranks.family" )[0..1].capitalize}.-#{t( "ranks.order" )[0..1].capitalize}"
                          when "genus_family"
                            "#{t( "ranks.genus" )[0..1].capitalize}.-#{t( "ranks.family" )[0..1].capitalize}"
                          when "species_genus"
                            "#{t( "ranks.species" )[0..1].capitalize}.-#{t( "ranks.genus" )[0..1].capitalize}"
                          when "species"
                            truncate( t( "ranks.species", default: "" ), length: 8, omission: "..." )
                          when "subspecies"
                            truncate( t( "ranks.subspecies", default: "" ), length: 8, omission: "..." )
                          end
                        when "continent"
                          continent_label = case label
                          when "Africa"
                            t( "places_name.africa" )
                          when "Asia"
                            t( "places_name.asia" )
                          when "Europe"
                            t( "places_name.europe" )
                          when "North America"
                            t( "places_name.north_america" )
                          when "Oceania"
                            t( "places_name.oceania" )
                          when "South America"
                            t( "places_name.south_america" )
                          when "none"
                            t :none
                          end
                          truncate( continent_label, length: 8, omission: "..." )
                        when "quality_grade"
                          truncate( t( label ), length: 8, omission: "..." )
                        else
                          label
                        end
                      = bar_label
              - precision_bar.values.each_with_index do | value, index |
                %rect{
                  class: "pre precision",
                  x: "#{10 + 54 * index}",
                  width: "50", y: "#{100-value*100}",
                  height: "#{value*100}",
                  onmousemove: "showTooltip( evt, '#{value*100}%' );",
                  onmouseout: "hideTooltip();"
                }
              - if @tab == "research_grade_results"
                %g.axis
                  %line.dashed-line{x1: "0", x2: "#{10 + 54 * precision_bar.count}", y1: "5", y2: "5"}
      #tooltip