<%- content_for(:title) do -%>
  <%= t(:taxonomic_tree_browser) %>
<%- end -%>
<%- content_for(:extracss) do -%>
  <style type="text/css" media="screen">
    /* visualization style container */
    #treevis {
        background-color:white;
        border: 1px solid #ddd;
        position:relative;
        width:950px;
        height:500px;
    }

    /* spacetree nodes CSS class */
    .node {
        background-color:transparent;
        font-weight:bold;
        overflow:hidden;
        text-decoration:none;
        position:absolute;
        text-align:center;
    }

    .node:hover {
      color: #003399;
    }

    .hidden{
        display:none;
    }
    
    #treevis .taxon .image img {
      max-width: 40px;
    }
    
    #treevis .taxon .image {
      float: left;
      margin-right: 5px;
    }
    
    #treevis .taxon .info {
      float: left;
      width: 145px;
    }
    
    #treevis .taxon.noimg .name {
      width: 165px;
    }
    
    #treevis .taxon .wikipedia_summary {
      display: none;
    }
    
    .qtip-content .taxon {
      width: 285px;
    }
    
    .qtip-content .taxon .name {
      font-family: Georgia, serif;
      font-size: 140%;
    }
    
    .qtip-content .taxon .wikipedia_summary {
      display: block;
    }
    
    .qtip-content .taxon .image {
      float: left;
      margin-right: 10px;
      width: 75px;
      text-align: center;
    }
    
    .qtip-content .taxon .info {
      float: left;
      width: 200px;
    }
    
    #loading_status {
      position: absolute; 
      display: block;
      margin: 0;
      padding: 5px 10px 5px 25px !important;
      background-position: 5px 50%;
      top: -1px; 
      right: -1px; 
      background-color:white;
      border: 1px solid #ddd;
    }
    
    #zoomlinks {
      line-height: 24px;
    }
    
    #zoomlinks .inter,
    #zoomlinks img {
      vertical-align: middle;
      font-color: #777;
    }
  </style>
<%- end -%>
<%- content_for(:extrajs) do -%>
  <!--[if IE]>  
  <script type="text/javascript" src="/javascripts/jit/Extras/excanvas.js"></script>  
  <![endif]-->
  <%= javascript_include_tag "jit/jit" %>
  <script type="text/javascript" charset="utf-8">
    window.loadedNodeIds = {};
    $(document).ready(function() {
      var json = <%= jit_taxon_tree_with_taxon(@taxon).to_json %>;
      var canvas = new Canvas('taxonTree', {
        injectInto: 'treevis',
        width: 950,
        height: 500,
        backgroundColor: '#eee'
      });
      
      var st = new ST(canvas, {
        levelsToShow: 1,
        Node: {
          color: '#eee',
          overridable: true,
          width: 200,
          height: 50
        },
        Edge: {
          color: '#aaa',
          overridable: true
        },
        duration: 200,
        onCreateLabel: function(label, node) {
          label.id = node.id;
          $(label).css({
            display: 'block',
            'text-align': 'left',
            width: '200px',
            height: '50px',
            padding: '5px'
          })
          label.innerHTML = node.data.html;
          label.onclick = function() {
            st.onClick(node.id);
          };
          
          $(label).find('.infolink').qtip($.extend(QTIP_DEFAULTS, {
            content: {text: label.innerHTML}
          }));
        },
        request: function(nodeId, level, onComplete) {
          var node = window.st.graph.getNode(nodeId);
          setHashParam('taxon_id', nodeId);
          
          // Try to prevent load if this node has already been loaded
          if (window.loadedNodeIds[nodeId] && node && node.visited) {
            onComplete.onComplete(nodeId, window.st.graph.getNode(nodeId));
          } else {
            $('#loading_status').show();
            $.getJSON('/taxa/'+nodeId+'.node', function(json) {
              window.loadedNodeIds[nodeId] = true;
              onComplete.onComplete(nodeId, json);
              $('#loading_status').hide();
            });
          }
        }
      });
      
      st.loadJSON(json);
      
      st.compute();
      
      // Tree.Geometry.translate(st.tree, new Complex(-200, 0), 'startPos');
      window.st = st;
      
      var hashparams = getHashParams();
      if (hashparams.taxon_id && st.graph.getNode(hashparams.taxon_id)) {
        st.onClick(hashparams.taxon_id);
      } else {
        st.onClick(<%= @taxon.id %>);
      }
    });
    
    function getHashParams() {
      var hashparams = {};
      $.each(window.location.hash.replace('#', '').split('&'), function() {
        var parts = this.split('=');
        if (parts.length > 1) hashparams[parts[0]] = parts[1];
      });
      return hashparams;
    }
    
    function getHashParam(key) {
      getHashParams()[key];
    }
    
    function setHashParam(key, value) {
      var hashparams = getHashParams();
      hashparams[key] = value;
      var pairs = [];
      $.each(hashparams, function(i, val) {
        pairs.push(i + '=' + val);
      });
      window.location.hash = pairs.join('&');
    }
  </script>
<%- end -%>

<div id="pageheader">
  <div class="breadcrumbs clear">
    <% if @taxon.root? -%>
      <%= link_to t(:back_to_all_species), taxa_path, :class => 'back crumb' %>
    <% else %>
      <%= link_to t(:back_to_shared_taxon, :sharedtaxon => "#{render(:partial => "shared/taxon")}"), @taxon, :class => 'back crumb' %>
    <% end -%>
  </div>

  <div id="zoomlinks" class="right">
    <%= link_to_function t(:zoom_to_x, :x => "<strong>#{render(:partial => "shared/taxon")}</strong>"), "window.st.onClick(#{@taxon.id})", :class => "inter" %>
    <span class="inter">|</span>
    <% for taxon in @iconic_taxa %>
      <%= link_to_function iconic_taxon_image(taxon, :size => 20), 
        "if (window.st.graph.getNode([#{taxon.id}])) {window.st.onClick(#{taxon.id});} " + 
        "else {window.location='#{url_for(:taxon_id => taxon)}'}",
        :class => "inter",
        :title => t(:zoom_to_taxon_name, :taxonname => "#{Taxon::ICONIC_TAXON_NAMES[taxon.name] || taxon.name}") %>
    <% end %>
  </div>
  <h2><%= t(:tree_browser) %></h2>
</div>

<div id="treevis">
  <div id="loading_status" class="loading status" style="display: none"><%= t(:loading) %></div>
</div>
