(function(){
/*
 * iNaturalist javascript library
 * Copyright (c) iNaturalist, 2007-2008
 * 
 * @date: 2008-01-01
 * @author: n8agrin
 * @author: kueda
 *
 * Much love to jQuery for the inspiration behind this class' layout.
 */
var iNaturalist = window.iNaturalist = new function(){
  
  // Abitlity to register distant namespases easily
  // based off of http://weblogs.asp.net/mschwarz/archive/2005/08/26/423699.aspx
  this.registerNameSpace = function(ns) {
   var nsParts = ns.split(".");
   var root = window;

   for(var i=0; i<nsParts.length; i++) {
    if(typeof root[nsParts[i]] == "undefined")
     root[nsParts[i]] = new Object();

    root = root[nsParts[i]];
   }
  };
  
  
  // Execute a RESTful delete by sending a DELETE request to a URL
  this.restfulDelete = function(deleteURL, options, target) {
    if(typeof(options.plural) == 'undefined') {
      var plural = false;
    } else {
      var plural = options.plural;
      options.plural = null;
    }
    var ajaxOptions = $.extend({}, options, {
      type: 'POST',
      data: $.extend({
        '_method': 'delete',
        'authenticity_token': $('meta[name=csrf-token]').attr('content')
      }, options.data),
      url: deleteURL
    });
    
    if (plural) {
      confirmStr = "Are you sure you want to delete these?";
    } else {
      confirmStr = "Are you sure you want to delete this?";
    };
    if (confirm(confirmStr)) {
      if (typeof(target) != 'undefined') {
        $(target).hide();
        var deleteStatus = $('<span class="loading status">Deleting...</span>');
        $(target).after(deleteStatus);
      }
      $.ajax(ajaxOptions);
    } else {
      return false;
    }
  };
  
  this.modalShow = function(hash) {
    iNaturalist.modalCenter(hash.w)
    hash.w.show()
    if (hash.c.overlay > 0) {
      hash.o.prependTo('body');
    }
  }
  
  this.modalCenter = function(elt) {
    elt.height('auto')
    var height = $(window).height()*0.9
    if (elt.height() < height ) { height = elt.height() }
    if (height = elt.height()) {
      elt.height('auto')
    } else {
      elt.height(height)
    }
    var top = $(window).scrollTop() + $(window).height()/2 - elt.height()/2-20
    elt.css('top', top + 'px')
  }

  this.localeParams = function( ) {
    var localeParams = { locale: I18n.locale };
    if( PREFERRED_PLACE ) {
      localeParams.preferred_place_id = PREFERRED_PLACE.id;
    }
    return localeParams;
  };

  this.Licenses = <%= Hash[Shared::LicenseModule::LICENSE_INFO.map do |k,l|
    icon_name = "#{l[:code]}_small.png";
    large_icon_name = "#{l[:code]}.png";
    [ l[:code].downcase, l.merge({
      icon: Rails.application.assets.find_asset(icon_name) ?
        asset_path( icon_name ) : nil,
      icon_large: Rails.application.assets.find_asset(large_icon_name) ?
        asset_path( large_icon_name ) : nil
    }) ]
  end].to_json %>;

  this.log = function( params, options ) {
    var options = options || {};
    try {
      // Restrict logging to the default site for now
      if ( typeof( SITE ) !== "object" || SITE.name !== "iNaturalist" ) {
        return;
      }
      var apiUrl = $( "meta[name='config:inaturalist_api_url']" ).attr( "content" );
      if ( !apiUrl ) return;
      var jwt = $( "meta[name='inaturalist-api-token']" ).attr( "content" );
      var url = apiUrl + "/log";
      if ( typeof( CONTROLLER_ACTION ) === "string" ) {
        params.controller_action = CONTROLLER_ACTION;
      }
      if ( options.method === "POST" ) {
        options.data = JSON.stringify( params );
      } else {
        url += "?" + $.param( params );
      }
      var ajaxOpts = Object.assign( options, { url: url } );
      if ( jwt && jwt.length > 0 ) {
        ajaxOpts.headers = { "Authorization": jwt };
      }
      $.ajax( ajaxOpts );
    } catch ( e ) {
      // Logging should never really throw an exception
      console.log( "[DEBUG] Failed to log: ", e );
    }
  }

  this.logError = function( error ) {
    this.log( {
      error_type: error.name,
      error_message: error.message,
      backtrace: error.stack
    }, {
      method: "POST",
      dataType: "json"
    } );
  }

}; // end of the iNaturalist singleton

// Class properties
iNaturalist.version = 0.1;

// Authenticity token placeholder, this allows valid post requests with
// Rails 2.x's new protect_from_forgery methods.  Unfortunately it must be
// set in the page since it is dependent on the user's specific session.
iNaturalist.form_authenticity_token = null;
})();
