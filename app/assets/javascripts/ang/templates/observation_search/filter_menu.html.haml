#filter-dropdown.container
  #filters-body
    .row
      .col-xs-4
        .row
          .col-xs-12
            %label.sectionlabel
              {{ shared.t('show') }}
        #show-filters.row
          #filters-left-col.col-xs-6
            .checkbox
              %label{ "ng-class" => "{ 'filter-changed': ( params.captive == 'false' ) }" }
                %input{type: 'checkbox', "ng-model" => "params.captive", "ng-true-value" => "'false'", "ng-false-value" => ""}
                {{ shared.t('wild') }}
            .checkbox
              %label{ "ng-class" => "{ 'filter-changed': ( params.captive == 'true' ) }" }
                %input{type: 'checkbox', "ng-model" => "params.captive", "ng-true-value" => "'true'", "ng-false-value" => ""}
                {{ shared.t('captive') }}
            .checkbox
              %label{ "uib-tooltip" => "{{ shared.t( 'eligible_for_research_grade' ) }}", "tooltip-placement" => "right", "ng-class" => "{ 'filter-changed': ( params.verifiable !== defaultParams.verifiable ) }" }
                %input{ type: 'checkbox', "ng-model" => "params.verifiable", "ng-false-value" => "" }
                {{ shared.t('verifiable') }}
            .checkbox
              %label{ "ng-class" => "{ 'filter-changed': ( params.quality_grade == 'research' ) }" }
                %input{ type: 'checkbox', value: 'research', "ng-model" => "params.quality_grade", "ng-true-value" => "'research'", "ng-false-value": "" }
                {{ shared.t('research_grade') }}
            .checkbox{ "ng-class" => "{ 'filter-changed': ( params.quality_grade == 'needs_id' ) }" }
              %label
                %input{ type: 'checkbox', value: 'research', "ng-model" => "params.quality_grade", "ng-true-value" => "'needs_id'", "ng-false-value": "" }
                {{ shared.t('needs_id_') }}
            .checkbox{ "ng-class" => "{ 'filter-changed': params.threatened }" }
              %label
                %input{ type: 'checkbox', "ng-model" => "params.threatened", "ng-false-value" => ""}
                {{ shared.t('threatened') }}
          .col-xs-6
            .checkbox{ "ng-class" => "{ 'filter-changed': params.introduced }" }
              %label
                %input{ type: 'checkbox', "ng-model" => "params.introduced", "ng-false-value" => ""}
                {{ shared.t('introduced') }}
            .checkbox{ "ng-class" => "{ 'filter-changed': params.popular }" }
              %label{ "uib-tooltip" => "{{ shared.t( 'has_one_or_more_faves' ) }}", "tooltip-placement" => "right" }
                %input{ type: 'checkbox', "ng-model" => "params.popular", "ng-false-value" => ""}
                {{ shared.t('popular') }}
            .checkbox{ "ng-class" => "{ 'filter-changed': params.sounds }" }
              %label
                %input{ type: 'checkbox', "ng-model" => "params.sounds", "ng-false-value" => "" }
                {{ shared.t('has_sounds') }}
            .checkbox{ "ng-class" => "{ 'filter-changed': params.photos }" }
              %label
                %input{ type: 'checkbox', "ng-model" => "params.photos", "ng-false-value" => "" }
                {{ shared.t('has_photos') }}
            .checkbox{ "ng-show" => "currentUser", "ng-class" => "{ 'filter-changed': ( ( params.user_id == currentUser.id ) || ( params.user_id == currentUser.login ) ) }" }
              %label
                %input{ type: 'checkbox', "ng-model" => "showingViewerObservations", "ng-change" => "toggleShowViewerObservations( )" }
                {{ shared.t('your_observations') }}
        .row
          .col-xs-12
            .form-group
              %label.sectionlabel{for: 'params-q'}
                {{ shared.t('description_slash_tags') }}
              %input#params-q.form-control{ "ng-model" => "params.q", "ng-model-options" => "{ debounce: 1000 }", placeholder: "{{ shared.t('blue_butterfly_etc') }}", "ng-class" => "{ 'filter-changed': params.q }" }
      #filters-center-col.col-xs-4
        .row
          .col-xs-12
            %label.sectionlabel
              {{ shared.t('categories') }}
            #filters-categories.btn-group
              - iconic_names = { Aves: "birds", Amphibia: "amphibians", Reptilia: "reptiles", Mammalia: "mammals", Actinopterygii: "ray_finned_fishes", Mollusca: "mollusks", Arachnida: "arachnids", Insecta: "insects", Plantae: "plants", Fungi: "fungi_including_lichens", Protozoa: "protozoans" }
              - iconic_names.each_with_index do |t, i|
                :ruby
                  next unless t
                  button_attrs = {
                    type: "button",
                    class: "btn btn-default iconic-taxon #{'last' if (i+1) % 6 == 0}",
                    "uib-btn-checkbox" => true,
                    "uib-btn-checkbox-true" => t[0],
                    "ng-model" => "params._iconic_taxa.#{t[0]}",
                    title: "{{ shared.t( 'all_taxa.#{t[1]}', { defaultValue: '#{t[0]}' } ) }}",
                    "ng-class" => "{ 'filter-changed': params._iconic_taxa.#{t[0]} }"
                  }
                %button{ button_attrs }
                  %i{ :class => "icon-iconic-#{t[0].downcase}" }
              %button{ type: "button", :class => "btn btn-default iconic-taxon last", "uib-btn-checkbox" => true, "uib-btn-checkbox-true" => "unknown", "ng-model" => "params._iconic_taxa.unknown", title: "{{ shared.t( 'unknown' ) }}", "ng-class" => "{ 'filter-changed': params._iconic_taxa.unknown }" }
                %i{ :class => "icon-iconic-unknown" }
        .row
          .col-xs-12
            %label.sectionlabel{ for: 'params-hrank' }
              {{ shared.t('rank') }}
        #filters-ranks.row
          .col-xs-6
            %select#params-hrank.form-control{ "ng-model" => "params.hrank", "ng-model-options" => "{debounce: 1000}", "ng-class" => "{ 'filter-changed': params.hrank }"}
              %option{value: ''}
                {{ shared.t('high') }}
              - for rank in Taxon::VISIBLE_RANKS
                %option{value: rank}
                  {{ shared.t('ranks.#{rank}') }}
          .col-xs-6
            %select#params-lrank.form-control{ "ng-model" => "params.lrank", "ng-model-options" => "{debounce: 1000}", "ng-class" => "{ 'filter-changed': params.hrank }" }
              %option{ value: '' }
                {{ shared.t('low') }}
              - for rank in Taxon::VISIBLE_RANKS
                %option{ value: rank }
                  {{ shared.t('ranks.#{rank}') }}
        .row
          .col-xs-12
            %label.sectionlabel{for: 'params-order-by'}
              {{ shared.t('sort_by') }}
        .row
          .col-xs-6
            %select#params-order-by.form-control{"ng-model" => "params.order_by", "ng-model-options" => "{debounce: 1000}", "ng-class" => "{ 'filter-changed': ( params.order_by !== defaultParams.order_by ) }"}
              - ( ObservationsController::ORDER_BY_FIELDS - %w( species_guess project id ) ).each do |f|
                - value = %w(created_at observations.id id).include?(f) ? 'observations.id' : f
                - default = ObservationsController::DISPLAY_ORDER_BY_FIELDS[f].to_s
                - key = default.parameterize.underscore
                %option{ value: value }
                  {{ shared.t( '#{ key }_', { defaultValue: shared.t( '#{ key }', { defaultValue: '#{default}' } ) } ) }}
          .col-xs-6
            %select#params-order.form-control{ "ng-model" => "params.order", "ng-model-options" => "{debounce: 1000}", "ng-class" => "{ 'filter-changed': ( params.order !== defaultParams.order ) }" }
              = FakeView.options_for_select(%w(asc desc).map{|o| ["{{ shared.t('#{o}') }}", o]}, @order)
      #filters-right-col.col-xs-4
        %label.sectionlabel
          {{ shared.t( 'date_observed_' ) }}
        .filters-dates
          %label.radio
            %input{ type: 'radio', name: 'date-type', "ng-model" => "params.dateType" }
              {{ shared.t('any_date') }}
          %label.radio
            %input{type: 'radio', name: 'date-type', value: 'exact', "ng-model" => "params.dateType"}
            %span.date-type.date-type-exact
              {{ shared.t('exact_date') }}
              %input.filters-dates-exact.form-control.input-sm.date-picker{type: 'text', placeholder: 'YYYY-MM-DD', "ng-model" => "params.on", "ng-click" => "params.dateType = 'exact'", "ng-class" => "{ 'filter-changed': processedParams.on }" }
          %label.radio
            %input{type: 'radio', name: 'date-type', value: 'range', "ng-model" => "params.dateType"}
            %span.date-type.date-type-range
              {{ shared.t('date_picker.range') }}
              %input.form-control.input-sm.date-picker{type: 'text', placeholder: "{{ shared.t('start') }}", "ng-model" => "params.d1", "ng-click" => "params.dateType = 'range'", "ng-class" => "{ 'filter-changed': processedParams.d1 }" }
              %input.form-control.input-sm.date-picker{type: 'text', placeholder: "{{ shared.t('end') }}", "ng-model" => "params.d2", "ng-click" => "params.dateType = 'range'", "ng-class" => "{ 'filter-changed': processedParams.d2 }" }
          %label.radio
            %input{type: 'radio', name: 'date-type', value: 'month', "ng-model" => "params.dateType"}
            %span.date-type.date-type-month
              {{ shared.t('months') }}
              = FakeView.select_tag :month, FakeView.options_for_select((1..12).to_a.map{|n| ["{{ shared.t('date_format.month.#{Date::MONTHNAMES[n].downcase}') }}", n]}, :selected => @observed_on_months), "ng-model" => "params.month", :class => "form-control input-sm", id: "filters-dates-month", multiple: "multiple", "ng-class" => "{ 'filter-changed': processedParams.month }"
        #filters-observation-fields{ "ng-show" => "canShowObservationFields( )" }
          %label.sectionlabel
            {{ shared.t( "observation_fields" ) }}
          %span.observation-field{ "ng-repeat" => "(k,v) in params.observationFields" }
            {{ k }}={{ v }}
            %button{ "ng-click" => "removeObservationField( k )" }
              &times;
          %input{ type: "hidden", name: "acc" }
          %input{ type: "hidden", name: "acc_above" }
          %input{ type: "hidden", name: "acc_below" }
          %input{ type: "hidden", name: "apply_project_rules_for" }
          %input{ type: "hidden", name: "captive" }
          %input{ type: "hidden", name: "day" }
          %input{ type: "hidden", name: "geo" }
          %input{ type: "hidden", name: "geoprivacy" }
          %input{ type: "hidden", name: "has[]" }
          %input{ type: "hidden", name: "id" }
          %input{ type: "hidden", name: "ident_taxon_id" }
          %input{ type: "hidden", name: "ident_taxon_id_exclusive" }
          %input{ type: "hidden", name: "ident_user_id" }
          %input{ type: "hidden", name: "identified" }
          %input{ type: "hidden", name: "lat" }
          %input{ type: "hidden", name: "license" }
          %input{ type: "hidden", name: "list_id" }
          %input{ type: "hidden", name: "lng" }
          %input{ type: "hidden", name: "members_of_project" }
          %input{ type: "hidden", name: "native" }
          %input{ type: "hidden", name: "not_in_place" }
          %input{ type: "hidden", name: "not_in_project" }
          %input{ type: "hidden", name: "not_matching_project_rules_for" }
          %input{ type: "hidden", name: "not_user_id" }
          %input{ type: "hidden", name: "oauth_application_id" }
          %input{ type: "hidden", name: "pcid" }
          %input{ type: "hidden", name: "photo_license" }
          %input{ type: "hidden", name: "projects[]" }
          %input{ type: "hidden", name: "radius" }
          %input{ type: "hidden", name: "rank" }
          %input{ type: "hidden", name: "search_on" }
          %input{ type: "hidden", name: "site_id" }
          %input{ type: "hidden", name: "sound_license" }
          %input{ type: "hidden", name: "taxon_geoprivacy" }
          %input{ type: "hidden", name: "taxon_ids" }
          %input{ type: "hidden", name: "taxon_ids[]" }
          %input{ type: "hidden", name: "term_id" }
          %input{ type: "hidden", name: "term_value_id" }
          %input{ type: "hidden", name: "unobserved_by_user_id" }
          %input{ type: "hidden", name: "user_after" }
          %input{ type: "hidden", name: "user_before" }
          %input{ type: "hidden", name: "viewer_id" }
          %input{ type: "hidden", name: "without_ident_user_id" }
          %input{ type: "hidden", name: "without_taxon_id" }
          %input{ type: "hidden", name: "without_term_id" }
          %input{ type: "hidden", name: "year" }
    .row
      .col-xs-12
        %button#filters-more-btn.btn.btn-link{ type: 'button', "ng-class" => "{ 'collapsed': moreFiltersHidden }", "ng-click" => "toggleMoreFilters( )" }
          {{ shared.t('more_filters') }}
          %i.fa.fa-caret-down
          %i.fa.fa-caret-up
        #more-filters{ "ng-class" => "{ 'collapse': moreFiltersHidden }" }
          .row
            .col-xs-4
              .form-group
                %label.sectionlabel{for: 'params-user-id'}
                  {{ shared.t('person') }}
                .input-group
                  %span.input-group-addon.icon-person
                  %input.form-control{ placeholder: "{{ shared.t('username_or_user_id') }}", type: "search", name: "user_name", "ng-class" => "{ 'filter-changed': params.user_id }" }
                  %input{ "ng-model" => "params.user_id", type: "hidden", name: "user_id" }
              .form-group
                %label.sectionlabel{for: 'params-project-id'}
                  {{ shared.t('project') }}
                .input-group
                  %span.input-group-addon.fa.fa-briefcase
                  %input.form-control{ placeholder: "{{ shared.t('name_or_slug') }}", type: "search", name: "project_name", title: "{{ shared.t('name_or_slug') }}", "ng-class" => "{ 'filter-changed': params.project_id }" }
                  %input{ "ng-model" => "params.project_id", type: "hidden", name: "project_id" }
              .form-group
                %label.sectionlabel{for: "params-place-name"}
                  {{ shared.t("place") }}
                .input-group
                  %span.input-group-addon.fa.fa-globe
                  %input.form-control{ placeholder: "{{ shared.t('place') }}", type: "search", name: "inat_place_name", "ng-class" => "{ 'filter-changed': selectedPlace }" }
                  %input{ type: "hidden", name: "place_id" }
            .col-xs-4
              .form-group
                %label.sectionlabel
                  {{ shared.t( 'photo_licensing' ) }}
                %select.form-control{ "ng-model" => "params.photo_license", "ng-class" => "{ 'filter-changed': params.photo_license }" }
                  %option{ value: '' }
                    {{ shared.t( 'all' ) }}
                  - for code, name, desc in Observation::LICENSES do
                    %option{ value: code }= code
              %label.sectionlabel
                {{ shared.t( 'reviewed' ) }}
              .form-group{ "ng-class" => "{ 'filter-changed': params.reviewed }" }
                %label.radio-inline
                  %input{ type: 'radio', name: 'reviewed-any', "ng-model" => "params.reviewed" }
                    {{ shared.t('any_reviewed') }}
                %label.radio-inline
                  %input{ type: 'radio', name: 'reviewed-yes', value: 'true', "ng-model" => "params.reviewed" }
                    {{ shared.t('yes') }}
                %label.radio-inline
                  %input{ type: 'radio', name: 'reviewed-no', value: 'false', "ng-model" => "params.reviewed" }
                    {{ shared.t('no') }}
            .col-xs-4
              %label.sectionlabel
                {{ shared.t( 'date_added' ) }}
              .filters-dates
                %label.radio
                  %input{type: 'radio', name: 'created-date-type', "ng-model" => "params.createdDateType"}
                    {{ shared.t( "any_date" ) }}
                %label.radio
                  %input{type: 'radio', name: 'created-date-type', value: 'exact', "ng-model" => "params.createdDateType"}
                  %span.date-type.date-type-exact
                    {{ shared.t('exact_date') }}
                    %input.filters-dates-exact.form-control.input-sm.date-picker{ type: 'text', placeholder: 'YYYY-MM-DD', "ng-model" => "params.created_on", "ng-click" => "params.createdDateType = 'exact'", "ng-class" => "{ 'filter-changed': processedParams.created_on }" }
                %label.radio
                  %input{type: 'radio', name: 'created-date-type', value: 'range', "ng-model" => "params.createdDateType"}
                  %span.date-type.date-type-range
                    {{ shared.t('date_picker.range') }}
                    %input.form-control.input-sm.date-picker{ type: 'text', placeholder: "{{ shared.t('start') }}", "ng-model" => "params.created_d1", "ng-click" => "params.createdDateType = 'range'", "ng-class" => "{ 'filter-changed': processedParams.created_d1 }" }
                    %input.form-control.input-sm.date-picker{ type: 'text', placeholder: "{{ shared.t('end') }}", "ng-model" => "params.created_d2", "ng-click" => "params.createdDateType = 'range'", "ng-class" => "{ 'filter-changed': processedParams.created_d2 }" }
  #filters-footer.row
    .col-xs-12
      %button.btn.btn-primary{ type: "button", "ng-click": "closeFilters( )" }
        {{ shared.t('update_search') }}
      %button.btn.btn-default{ type: 'button', "ng-click": "resetParams( )" }
        {{ shared.t('reset_search_filters') }}
      #footer-links.pull-right
        %a.btn.btn-link{"ng-href" => "/observations/identify?{{ paramsForUrl( ) }}", target: "_self"}
          %i.icon-identification
          %span {{ shared.t('identify_title') }}
        %a.btn.btn-link{"ng-href" => "/observations.atom?{{ paramsForUrl( { convertProjectsParam: true } ) }}", target: "_self"}
          %i.fa.fa-rss
          %span {{ shared.t('atom') }}
        %a.btn.btn-link{"ng-href" => "/observations/export?{{ paramsForUrl( { convertProjectsParam: true } ) }}", target: "_self"}
          %i.fa.fa-download
          %span {{ shared.t('download') }}
