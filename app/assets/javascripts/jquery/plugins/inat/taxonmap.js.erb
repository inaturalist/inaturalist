/* eslint-disable no-param-reassign, no-underscore-dangle */
/* global I18n */
/* global _ */
/* global CURRENT_USER */
/* global iNaturalist */
/* global google */
/* global updateSession */
/* global preciseRound */

var inatTaxonMap = { };

( function ( $ ) {
  $.fn.taxonMap = function ( options ) {
    options = options || { };
    $( this ).each( function ( ) {
      if ( options === "fit" ) {
        inatTaxonMap.fit( this );
      } else {
        inatTaxonMap.setup( this, options );
      }
    } );
  };
}( jQuery ) );

var setMapTypeAndUpdateSession = function ( options, mapTypeID ) {
  if ( options.updateCurrentUser ) {
    options.updateCurrentUser( { preferred_observations_search_map_type: mapTypeID } );
  } else {
    updateSession( { preferred_observations_search_map_type: mapTypeID } );
  }
};

var setUrlHashCoord = function ( ) {
  var coords = window.map.getCenter( );
  var x = preciseRound( coords.lng( ), 3 );
  var y = preciseRound( coords.lat( ), 3 );
  var z = window.map.getZoom( );
  var baseUrl = window.location.href.split( "#" )[0];
  window.location.replace( baseUrl + "#" + [z, y, x].join( "/" ) );
};

var getUrlHashCoord = function ( ) {
  var bits = window.location.hash.split( "/" ).map( function ( x ) {
    return parseFloat( x.replace( /[^0-9\-.]/, "" ) );
  } );
  return { lat: bits[1], lng: bits[2], zoom: bits[0] };
};

inatTaxonMap.setup = function ( elt, opts ) {
  var options = $.extend( true, { }, opts );
  options.latitude = options.latitude || $( elt ).data( "latitude" );
  options.longitude = options.longitude || $( elt ).data( "longitude" );
  options.mapType = options.mapType || $( elt ).data( "map-type" );
  options.mapStyle = options.mapStyle || $( elt ).data( "map-style" );
  options.zoomLevel = options.zoomLevel || parseInt( $( elt ).data( "zoom-level" ), 10 );
  options.minZoom = options.minZoom || parseInt( $( elt ).data( "min-zoom" ), 10 );
  options.urlCoords = options.urlCoords || $( elt ).data( "url-coords" );
  options.disableFullscreen = ( ( options.disableFullscreen || $( elt ).data( "disable-fullscreen" ) ) === true );
  options.showRange = options.showRange || $( elt ).data( "show-range" );
  options.minX = options.minX || $( elt ).data( "min-x" );
  options.minY = options.minY || $( elt ).data( "min-y" );
  options.maxX = options.maxX || $( elt ).data( "max-x" );
  options.maxY = options.maxY || $( elt ).data( "max-y" );
  options.flagLetters = $( elt ).data( "flag-letters" );
  options.observations = options.observations || $( elt ).data( "observations" );
  options.observationLayers = options.observationLayers || $( elt ).data( "observation-layers" );
  options.placeLayers = options.placeLayers || $( elt ).data( "place-layers" );
  options.taxonLayers = options.taxonLayers || $( elt ).data( "taxon-layers" );
  options.mapTypeControl = ( options.mapTypeControl !== false && $( elt ).data( "map-type-control" ) !== true );
  options.mapTypeControlOptions = options.mapTypeControlOptions || $( elt ).data( "map-type-control-options" );
  options.zoomControl = ( options.zoomControl !== false && $( elt ).data( "zoom-control" ) !== false );
  options.scrollwheel = ( options.scrollwheel !== false && $( elt ).data( "scrollwheel" ) !== false );
  options.overlayMenu = ( options.overlayMenu !== false && $( elt ).data( "overlay-menu" ) !== false );
  options.enableShowAllLayer = ( options.enableShowAllLayer !== false && $( elt ).data( "enable-show-all-layer" ) !== false );
  options.showAllLayer = options.showAllLayer != null ? options.showAllLayer : $( elt ).data( "show-all-layer" );
  options.featuredLayerLabel = options.featuredLayerLabel || $( elt ).data( "featured-layer-label" ) || I18n.t( "maps.overlays.featured_observations" );
  options.featuredLayerDescription = options.featuredLayerDescription || $( elt ).data( "featured-layer-description" );
  options.placeLayerLabel = options.placeLayerLabel || $( elt ).data( "place-layer-label" );
  options.placeLayerDescription = options.placeLayerDescription || $( elt ).data( "place-layer-description" );
  options.placement = options.placement || $( elt ).data( "placement" );
  options.taxonRangeLayerLabel = options.taxonRangeLayerLabel || $( elt ).data( "taxon-range-layer-label" ) || I18n.t( "maps.overlays.range" );
  options.taxonRangeLayerDescription = options.taxonRangeLayerDescription || $( elt ).data( "taxon-range-layer-description" );
  options.taxonPlacesLayerLabel = options.taxonPlacesLayerLabel || $( elt ).data( "taxon-places-layer-label" ) || I18n.t( "maps.overlays.checklist_places" );
  options.taxonPlacesLayerDescription = options.taxonPlacesLayerDescription || $( elt ).data( "taxon-places-layer-description" );
  options.taxonPlacesLayerHover = options.taxonPlacesLayerHover || $( elt ).data( "taxon-places-layer-hover" ) || I18n.t( "maps.overlays.checklist_places_description" );
  options.taxonObservationsLayerLabel = options.taxonObservationsLayerLabel || $( elt ).data( "taxon-observations-layer-label" ) || I18n.t( "maps.overlays.observations" );
  options.taxonObservationsLayerDescription = options.taxonObservationsLayerDescription || $( elt ).data( "taxon-observations-layer-description" );
  options.allLayerLabel = options.allLayerLabel || $( elt ).data( "all-layer-label" ) || I18n.t( "maps.overlays.all_observations" );
  options.allLayerDescription = options.allLayerDescription || $( elt ).data( "all-layer-description" ) || I18n.t( "maps.overlays.every_publicly_visible_observation" );
  options.gbifLayerLabel = options.gbifLayerLabel || $( elt ).data( "gbif-layer-label" ) || I18n.t( "gbif_occurrences" );
  options.gbifLayerDescription = options.gbifLayerDescription || $( elt ).data( "gbif-layer-description" );
  options.gbifLayerHover = options.gbifLayerHover || $( elt ).data( "gbif-layer-hover" ) || I18n.t( "maps.overlays.gbif_network_description2" );
  options.controlPosition = options.controlPosition || $( elt ).data( "control-position" );
  options.elastic_params = options.elastic_params || $( elt ).data( "elastic-params" );
  options.gestureHandling = options.gestureHandling || $( elt ).data( "gesture-handling" );
  options.tilt = options.tilt || $( elt ).data( "tilt" ) || 0;
  options.currentUser = options.currentUser || $( elt ).data( "current-user" );
  options.taxonGeomodelLayerLabel = options.taxonGeomodelLayerLabel
    || $( elt ).data( "taxon-geomodel-layer-label" )
    || I18n.t( "views.geo_model.explain.unthresholded_map.unthresholded_map" );
  options.taxonGeomodelThresholdedLayerLabel = options.taxonGeomodelThresholdedLayerLabel
    || $( elt ).data( "taxon-geomodel-thresholded-layer-label" )
    || I18n.t( "views.geo_model.explain.nearby_map.expected_nearby_map" );
  options.taxonGeomodelComparisonLayerLabel = options.taxonGeomodelComparisonLayerLabel
    || $( elt ).data( "taxon-geomodel-comparison-layer-label" )
    || I18n.t( "views.geo_model.explain.range_comparison.expected_nearby_vs_taxon_range" );
  if ( typeof ( CURRENT_USER ) === "object" ) {
    options.currentUser = options.currentUser || CURRENT_USER;
  }
  // turn the observations JSON into proper JavaScript objects
  if ( options.observations ) {
    options.observations = _.map( options.observations, function ( observation ) {
      if ( typeof ( observation ) === "string" ) {
        return jQuery.parseJSON( observation );
      }
      return _.assignIn( {}, observation );
    } );
  }
  if ( options.zoomLevel === 0 ) {
    options.zoomLevel = null;
  }
  if ( !options.showAllLayer && options.showAllLayer !== false ) {
    options.showAllLayer = true;
  }
  $( elt ).data( "taxonMapOptions", $.extend( true, { }, options ) );
  inatTaxonMap.setupGoogleMap( elt );
};

inatTaxonMap.fit = function ( elt ) {
  inatTaxonMap.fitGoogle( elt );
};

inatTaxonMap.setupGoogleMap = function ( elt ) {
  var options = $( elt ).data( "taxonMapOptions" );
  if ( typeof ( google ) === "undefined" ) {
    $( elt ).html( "<div class='alert alert-warning alert-inside text-center'>" + I18n.t( "google_maps_not_loaded_error" ) + "</div>" );
    return;
  }
  var map;
  // eslint-disable-next-line prefer-object-spread
  var mapTypeControlOptions = Object.assign(
    {},
    options.mapTypeControlOptions
  );
  if ( $( "html[dir='rtl']" ).length > 0 ) {
    mapTypeControlOptions.position = mapTypeControlOptions.position
      || google.maps.ControlPosition.BLOCK_START_INLINE_END;
  }
  var mapOptions = $.extend( true, { }, {
    backgroundColor: "#E3EAF6",
    gestureHandling: options.gestureHandling,
    mapTypeControl: ( options.mapTypeControl !== false ),
    mapTypeControlOptions: mapTypeControlOptions,
    minZoom: options.minZoom,
    placement: options.placement,
    scrollwheel: ( options.scrollwheel !== false ),
    styles: [
      {
        stylers: [
          { lightness: 50 },
          { saturation: -50 }
        ]
      }
    ],
    tilt: options.tilt,
    zoomControl: ( options.zoomControl !== false ),
    zoomControlOptions: options.zoomControlOptions
  } );
  if ( $( elt ).data( "taxonMap" ) ) {
    map = $( elt ).data( "taxonMap" );
    map.setOptions( mapOptions );
  } else {
    map = iNaturalist.Map.createMap( $.extend( true, { }, mapOptions, {
      div: elt,
      disableFullscreen: true,
      fullscreenControl: !options.disableFullscreen,
      fullscreenControlOptions: !options.disableFullscreen && {
        position: $( "html[dir='rtl']" ).length > 0
          ? google.maps.ControlPosition.LEFT_TOP
          : google.maps.ControlPosition.RIGHT_TOP
      }
    } ) );
  }

  // eslint-disable-next-line prefer-destructuring
  var preserveViewport = options.preserveViewport;
  if ( options.minX ) {
    // Google really doesn't like 90 deg latitude all of a sudden
    var minY = Math.max( options.minY || 0, -89 );
    var maxY = Math.min( options.maxY || 0, 89 );
    map.fitBounds(
      new google.maps.LatLngBounds(
        new google.maps.LatLng( minY, options.minX || 0 ),
        new google.maps.LatLng( maxY, options.maxX || 0 )
      )
    );
    preserveViewport = true;
  } else {
    if ( options.latitude || options.longitude ) {
      map.setCenter( new google.maps.LatLng( options.latitude || 0, options.longitude || 0 ) );
      preserveViewport = true;
    }
    if ( options.zoomLevel ) {
      map.setZoom( options.zoomLevel );
    }
  }

  // Create the custom control (but don't show it yet)
  if ( options.overlayMenu && !map._overlayControl ) {
    map._overlayControl = new iNaturalist.OverlayControl( map );
  }

  // Set custom map type
  if ( options.mapType ) {
    map.setMapTypeId( options.mapType );
  } else if ( options.currentUser || typeof ( CURRENT_USER ) === "object" ) {
    var preferredMapTypeId = iNaturalist.Map.preferredMapTypeId(
      options.currentUser || CURRENT_USER
    );
    if ( map.getMapTypeId( ) !== preferredMapTypeId ) {
      map.setMapTypeId( preferredMapTypeId );
    }
  }

  if ( !map.mapTypeListener ) {
    map.mapTypeListener = google.maps.event.addListener( map, "maptypeid_changed", function ( ) {
      setMapTypeAndUpdateSession( options, this.getMapTypeId( ) );
    } );
  }

  if ( options.showLegend && !map._legend ) {
    // Create the DIV to hold the control and call the CenterControl( ) constructor
    // passing in this DIV.
    var legendControlDiv = document.createElement( "div" );
    var legendControl = new iNaturalist.LegendControl( legendControlDiv, map );
    if ( $( 'html[dir="rtl"]' ).length > 0 ) {
      map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push( legendControlDiv );
    } else {
      map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push( legendControlDiv );
    }
    // Create the DIV to hold the control and call the CenterControl( ) constructor
    // passing in this DIV.
    var legendDiv = document.createElement( "div" );
    map._legend = new iNaturalist.Legend(legendDiv, map);
    if ( $( 'html[dir="rtl"]' ).length > 0 ) {
      map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push( legendDiv );
    } else {
      map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push( legendDiv );
    }
  }

  // Clear out all existing overlays so we can add new ones
  map.removeAllLayers( );
  if ( map._overlayControl ) {
    map._overlayControl.removeAll( );
  }
  map.removeObservations( );
  delete map.taxonLayerSignatures;

  // All Observations layer
  if ( options.showAllLayer ) {
    if ( !_.isObject( options.showAllLayer ) ) {
      options.showAllLayer = { };
    }
    map.addObservationsLayer( options.allLayerLabel, _.defaults( options.showAllLayer, {
      description: options.allLayerDescription,
      disabled: options.enableShowAllLayer === false,
      controlPosition: options.controlPosition,
      mapStyle: options.mapStyle || "summary",
      ttl: 60 * 60 * 24 // 24 hours
    } ) );
  }
  // these are taxon ranges, listed_taxa places, and taxon-filtered observations
  inatTaxonMap.addTaxonLayers( map, options );
  // these are single place polygons
  inatTaxonMap.addPlaceLayers( map, options );
  // these are the grid/point observation layers
  inatTaxonMap.addObservationLayers( map, options );
  // these are the observations that need Google Maps-style flags
  inatTaxonMap.addObservationsToMap( map, options, preserveViewport );
  var coord;
  if ( options.urlCoords && !map.setUrlHashCoordDragendListener ) {
    map.setUrlHashCoordDragendListener = google.maps.event.addListener( map, "dragend", setUrlHashCoord );
    map.setUrlHashCoordZoomChangedListener = google.maps.event.addListener( map, "zoom_changed", setUrlHashCoord );
    coord = getUrlHashCoord( );
    if ( coord.lat ) {
      setTimeout( function ( ) {
        window.map.setCenter( new google.maps.LatLng( coord.lat, coord.lng ) );
        window.map.setZoom( coord.zoom );
      }, 100 );
      preserveViewport = true;
    }
  }
  if ( options.onZoomChanged ) {
    map.onZoomChagedListener = google.maps.event.addListener( map, "zoom_changed", function ( e ) {
      options.onZoomChanged( e, map );
    } );
  }
  if ( !preserveViewport ) {
    inatTaxonMap.fit( elt );
  }
  // Now apply the custom map to the element
  $( elt ).data( "taxonMap", map );
};

inatTaxonMap.addTaxonLayers = function ( map, options ) {
  if ( !options.taxonLayers ) { return; }
  _.each( options.taxonLayers, function ( layer ) {
    if ( !( layer.taxon && layer.taxon.id ) ) { return; }
    map.taxonLayerSignatures = map.taxonLayerSignatures || {};
    var sig = JSON.stringify( layer );
    if ( map.taxonLayerSignatures[sig] ) {
      return;
    }
    $.getJSON( "<%= CONFIG.public_node_api_url || CONFIG.node_api_url %>/taxa/" + layer.taxon.id + "/map_layers", function ( taxonData ) {
      inatTaxonMap.addTaxonLayer( map, layer, options, taxonData );
    } );
  } );
};

inatTaxonMap.addTaxonLayer = function ( map, layer, options, taxonData ) {
  map.taxonLayerSignatures = map.taxonLayerSignatures || {};
  var sig = JSON.stringify( layer );
  if ( map.taxonLayerSignatures[sig] ) {
    return;
  }
  map.taxonLayerSignatures[sig] = true;
  if ( layer.geomodel && layer.taxon ) {
    map.addTaxonGeomodelLayer( {
      taxon: layer.taxon,
      title: options.taxonGeomodelLayerLabel,
      controlPosition: options.controlPosition
    } );
  }
  if ( layer.geomodel_thresholded && layer.taxon ) {
    map.addTaxonGeomodelLayer( {
      taxon: layer.taxon,
      title: options.taxonGeomodelThresholdedLayerLabel,
      controlPosition: options.controlPosition,
      thresholded: true
    } );
  }
  if ( layer.geomodel_comparison && layer.taxon ) {
    map.addTaxonGeomodelComparisonLayer( {
      taxon: layer.taxon,
      title: options.taxonGeomodelComparisonLayerLabel,
      controlPosition: options.controlPosition
    } );
  }
  var layerOptions;
  if ( layer.places && layer.taxon && taxonData.listed_places ) {
    layerOptions = _.isObject( layer.places )
      ? layer.places : { };
    map.addTaxonPlacesLayer( _.defaults( layerOptions, {
      taxon: layer.taxon,
      title: options.taxonPlacesLayerLabel,
      description: options.taxonPlacesLayerDescription,
      hover: options.taxonPlacesLayerHover,
      controlPosition: options.controlPosition
    } ) );
  }
  if ( layer.ranges && taxonData.ranges ) {
    layerOptions = _.isObject( layer.ranges )
      ? layer.ranges : { };
    map.addTaxonRangeLayer( _.defaults( layerOptions, {
      taxon: layer.taxon,
      title: options.taxonRangeLayerLabel,
      description: options.taxonRangeLayerDescription,
      hover: options.taxonRangeLayerHover,
      controlPosition: options.controlPosition,
      disabled: options.disabled === "disabled",
      link: "/taxa/" + layer.taxon.id + "/range.html"
    } ) );
  }
  if ( layer.observations ) {
    layerOptions = _.isObject( layer.observations )
      ? layer.observations : { };
    map.addObservationsLayer( options.taxonObservationsLayerLabel, _.defaults( layerOptions, {
      taxon: layer.taxon,
      description: options.taxonObservationsLayerDescription,
      hover: options.taxonObservationsLayerHover,
      controlPosition: options.controlPosition,
      mapStyle: options.mapStyle,
      layerID: options.layerID
    } ) );
  }
  if ( layer.observationLayers ) {
    _.forEach( layer.observationLayers, function ( lyr ) {
      map.addObservationsLayer( lyr.label || options.taxonObservationsLayerLabel, _.defaults( lyr, {
        taxon: layer.taxon,
        description: options.taxonObservationsLayerDescription,
        hover: options.taxonObservationsLayerHover,
        controlPosition: options.controlPosition,
        mapStyle: options.mapStyle
      } ) );
    } );
  }
  if ( layer.gbif && taxonData.gbif_id ) {
    layerOptions = _.isObject( layer.gbif ) ? layer.gbif : { };
    map.addGBIFLayer( _.defaults( layerOptions, {
      taxon: layer.taxon,
      gbif_id: taxonData.gbif_id,
      title: options.gbifLayerLabel,
      description: options.gbifLayerDescription,
      hover: options.gbifLayerHover,
      controlPosition: options.controlPosition,
      link: "http://www.gbif.org/species/" + taxonData.gbif_id
    } ) );
  }
};

inatTaxonMap.addPlaceLayers = function ( map, options ) {
  if ( options.placeLayers ) {
    _.each( options.placeLayers, function ( layer ) {
      if ( !layer.place ) { return; }
      map.addPlaceLayer( _.defaults( _.clone( layer ), {
        title: layer.place.name,
        description: options.placeLayerLabel
      } ) );
    } );
  }
};

inatTaxonMap.addObservationLayers = function ( map, options ) {
  options = options || { };
  if ( options.observationLayers ) {
    _.each( options.observationLayers, function ( layer ) {
      var title = options.title || layer.title || options.featuredLayerLabel || "Observations";
      map.addObservationsLayer( title, _.defaults( _.clone( layer ), {
        controlPosition: options.controlPosition,
        mapStyle: options.mapStyle,
        infoWindowCallback: options.infoWindowCallback
      } ) );
    } );
  }
};

inatTaxonMap.removeObservationLayers = function ( map, options ) {
  options = options || { };
  var title = options.title || options.featuredLayerLabel || "Observations";
  map.removeObservationsLayer( title );
};

inatTaxonMap.addObservationsToMap = function ( map, options, preserveViewport ) {
  if ( !options.observations ) {
    return;
  }
  var letterCounter = 0;
  var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  var iconImg;

  _.each( options.observations, function ( o ) {
    if ( !o ) { return; }
    var iconDiv = $( "#observation-" + o.id + " .icon" ).get( 0 );
    if ( !( ( o.latitude && o.longitude ) || ( o.private_latitude && o.private_longitude ) ) ) {
      if ( options.appendMarkerToList ) {
        // eslint-disable-next-line quotes
        iconImg = $( '<img src="<%= asset_path( "mapMarkers/questionmarker.png" ) %>"/>' );
        $( iconDiv ).text( "" ).append( iconImg );
        return;
      }
    }
    var observationOptions = { clickable: options.clickable, showAccuracy: options.showAccuracy };
    if ( options.flagLetters ) {
      observationOptions.icon = iNaturalist.Map.createObservationIcon( {
        color: "HotPink",
        character: letters[letterCounter],
        stemless: o.coordinates_obscured,
        quality_grade: o.quality_grade
      } );
    }
    map.addObservation( o, observationOptions );
    if ( options.appendMarkerToList && o.marker ) {
      var src = o.marker.getIcon( );
      if ( src.url ) src = src.url;
      iconImg = $( "<img/>" ).attr( "src", src ).addClass( "marker" );
      $( iconDiv ).text( "" ).append( iconImg );
      $( iconImg ).click( function ( ) {
        map.openInfoWindow.apply( o.marker );
      } );
    }
    letterCounter += 1;
  } );
  if ( preserveViewport ) { return; }
  if ( options.observations.length !== 1 ) {
    map.zoomToObservations( );
    return;
  }
  google.maps.event.addListenerOnce( map, "idle", function ( ) {
    var o = options.observations[0];
    var center = new google.maps.LatLng(
      o.private_latitude || o.latitude,
      o.private_longitude || o.longitude
    );
    map.setCenter( center );

    // Start setting the map bounds. For single observations, this largeley
    // depends on the precision of the coordinates
    var accuracyCircle;
    // Viewer can view private coordinates and positional accuracy set
    if ( o.private_latitude && o.positional_accuracy ) {
      accuracyCircle = new google.maps.Circle( {
        center: new google.maps.LatLng( o.private_latitude, o.private_longitude ),
        radius: o.positional_accuracy
      } );
    // Viewer cannot view private coordinates or they haven't been set,
    // show the public positional accuracy
    } else if ( o.public_positional_accuracy ) {
      accuracyCircle = new google.maps.Circle( {
        center: new google.maps.LatLng( o.latitude, o.longitude ),
        radius: o.public_positional_accuracy
      } );
    }

    // Default to showing the map scale used when the user was editing the observation,
    // or something in the middle
    if ( o.map_scale ) {
      map.setZoom( o.map_scale );
    } else {
      map.setZoom( 8 );
    }

    // If there is an accuracy circle, make sure we don't
    // default to zooming in so far it isn't shown
    if ( accuracyCircle ) {
      var mapBounds = map.getBounds( );
      var circleBounds = accuracyCircle.getBounds( );
      if ( circleBounds.contains( mapBounds.getNorthEast( ) )
        && circleBounds.contains( mapBounds.getSouthWest( ) )
      ) {
        map.fitBounds( circleBounds );
      } else if ( !o.map_scale ) {
        map.setZoom( 10 );
      }
    }
  } );
};

inatTaxonMap.fitGoogle = function ( elt ) {
  var options = $( elt ).data( "taxonMapOptions" );
  var map = $( elt ).data( "taxonMap" );
  if ( !map ) { return; }
  if ( options.minX ) {
    map.fitBounds(
      new google.maps.LatLngBounds(
        new google.maps.LatLng( options.minY, options.minX ),
        new google.maps.LatLng( options.maxY, options.maxX )
      )
    );
    return;
  }
  map.setCenter( new google.maps.LatLng( 0, 0 ) );
  map.setZoom( 1 );
};
