var inaturalist = inaturalist || { };
// sort iconic taxa so all apps use the same order and have identical assets
inaturalist.ICONIC_TAXA = <%= Hash[Taxon::ICONIC_TAXA.sort.map{ |t|
  [ t.id, { name: t.name, icon: asset_path("assets/iconic_taxa/#{ t.name.downcase }-75px.png") } ]
}].to_json %>;
inaturalist.UNKNOWN_TAXON_ICON = "<%= asset_path('assets/iconic_taxa/unknown-75px.png') %>";
inaturalist.EXTERNAL_SEARCH_ICON = "<%= asset_path('external_search.png') %>";

var autocompleter = { };

autocompleter.capitalize = function( s ) {
  if( !s ) { return; }
  return s[0].toUpperCase( ) + s.slice( 1 );
};

// return the taxon's photo, or it's iconic taxon icon, or use the unknown icon
autocompleter.defaultPhotoForResult = function( result ) {
  if( result.type === "search_external" || result.type === "message" || !result.name ) {
    return "<i class='fa fa-search'></i>";
  }
  return result.photoTag( );
};

// return the best name in the locale, or defaulting to EN
autocompleter.setTitle = function( result ) {
  if( result.title ) { return; }
  var name = result.preferred_common_name || result.english_common_name;
  result.title = name || result.name;
};

autocompleter.stringIncludes = function( string, test ) {
  if( !string || !test ) { return false; }
  return (string.toLowerCase().indexOf( test.toLowerCase() ) != -1 );
};

autocompleter.appendMatchedTerm = function( result, fieldValue ) {
  if( !result.matched_term ) { return; }
  if( autocompleter.stringIncludes( result.title, fieldValue ) ||
      autocompleter.stringIncludes( result.subtitle, fieldValue )) { return; }
  if( autocompleter.stringIncludes( result.title, result.matched_term ) ||
      autocompleter.stringIncludes( result.subtitle, result.matched_term )) { return; }
  result.title += " (" + autocompleter.capitalize( result.matched_term ) + ")";
};

autocompleter.taxonTemplate = function( result, fieldValue ) {
  autocompleter.setTitle( result );
  if( result.title && result.name != result.title ) {
    if( result.rank_level <= 10 ) {
      result.subtitle = "<i>" + result.name + "</i>";
    } else {
      result.subtitle = result.name;
    }
  }
  autocompleter.appendMatchedTerm( result, fieldValue );
  if( result.rank && ( result.rank_level > 10 || !result.subtitle )) {
    result.subtitle =
      autocompleter.capitalize( I18n.t("ranks." + result.rank, { defaultValue: result.rank } ) ) +
      ( result.subtitle ? " " + result.subtitle : "" );
  }

  result.defaultPhoto = autocompleter.defaultPhotoForResult( result );
  var wrapperDiv = $( "<div/>" ).addClass( "ac" ).attr( "data-taxon-id", result.id ).
    attr( "data-type", result.type );
  var thumbDiv = $( "<div/>" ).addClass( "ac-thumb" );
  if( result.defaultPhoto ) {
    $( result.defaultPhoto ).appendTo( thumbDiv );
  }
  var labelDiv = $( "<div/>" ).addClass( "ac-label" );
  labelDiv.append( $( "<span/>" ).addClass( "title" ).append( result.title ));
  labelDiv.append( $( "<span/>" ).addClass( "subtitle" ).
    append( result.subtitle ));
  // anything w/o an ID is some kind of message or non-result UI
  if( !result.id) {
    wrapperDiv.addClass( "ac-message" );
    if( result.type == "search_external" ) {
      labelDiv.find( ".title" ).addClass( "linky" );
    }
    // JQuery autocomplete need an <a> tag in order to
    // consider the row active and clickable.
    labelDiv.append( $( "<a/>" ).attr( "href", "#" ) );
  }
  if( result.id ) {
    var rightElement = $( "<a/>" ).attr( "target", "_blank" ).
      attr( "href", "/taxa/" + result.id );
    $( "<div/>" ).addClass( "ac-view" ).append( I18n.t("view") ).appendTo( rightElement );
    wrapperDiv.append( rightElement );
  }
  wrapperDiv.append( thumbDiv );
  wrapperDiv.append( labelDiv );
  wrapperDiv.append( rightElement );
  return wrapperDiv;
};

autocompleter.createWrappingDiv = function( field, options ) {
  if( !field.parent().hasClass( "ac-chooser" ) ) {
    var wrappingDiv = $( "<div/>" ).addClass( "ac-chooser" );
    field.wrap( wrappingDiv );
    if( options.thumbnail !== false ) {
      // render the initial thumbnail of existing result, or the unknown icon
      var photo = autocompleter.defaultPhotoForResult({
        default_photo_url: field.data( "default-photo-url" ),
        iconic_taxon_id: field.data( "iconic-taxon-id" ) });
      var thumbDiv = $( "<div/>" ).addClass( "ac-select-thumb" );
      if( photo ) {
        thumbDiv.append( $( photo ) );
      }
      field.parent( ).prepend( thumbDiv );
      if( options.bootstrapClear ) {
        var removeIcon = $( "<span/>" ).addClass( "searchclear glyphicon glyphicon-remove-circle" );
        field.parent( ).append( removeIcon );
        removeIcon.on( "click", function( ) {
          field.trigger( "resetAll" );
        });
      }
    }
  }
};

$.fn.taxonAutocomplete = function( options ) {
  options = options || { };
  options.idEl = options.idEl || $( "#taxon_id" );
  if( !options.idEl ) { return; }
  var field = this;
  field.template = autocompleter.taxonTemplate;
  var source = function( request, response ) {
    $.ajax({
      url: "//<%= CONFIG.node_api_host %>/taxa/autocomplete",
      dataType: "jsonp",
      cache: true,
      data: {
        q: request.term,
        per_page: options.perPage || 10,
        locale: I18n.locale,
        preferred_place_id: PREFERRED_PLACE ? PREFERRED_PLACE.id : null
      },
      jsonpCallback: "taxonAutocompleteCallback",
      success: function( data ) {
        var results = data.results || [ ];
        // show as the last item an option to search external name providers
        if( options.searchExternal !== false ) {
          results.push({
            type: "search_external",
            title: I18n.t("search_external_name_providers")
          });
        }
        if( options.showPlaceholder && !options.idEl.val( ) && field.val( ) ) {
          results.unshift({
            type: "placeholder",
            title: I18n.t("use_name_as_a_placeholder", { name: field.val( ) })
          });
        }
        response( _.map( results, function( r ) {
          return new iNatModels.Taxon( r );
        }));
      }
    });
  };
  var select = function( e, ui ) {
    // clicks on the View link should not count as selection
    if( e && e.toElement && $(e.toElement).hasClass( "ac-view" ) ) {
      return false;
    }
    // they selected the search external name provider option
    if( ui.item.type === "search_external" && field.val( ) ) {
      // set up an unique ID for this AJAX call to prevent conflicts
      var thisSearch = Math.random();
      ac.searchInProgress = thisSearch;
      $.ajax({
        url: "/taxa/search.json?per_page="+ options.perPage +
          "&include_external=1&partial=elastic&q=" + field.val( ),
        dataType: "json",
        beforeSend: function(XMLHttpRequest) {
          // replace 'search external' with a loading indicator
          var externalItem = $(".ac[data-type='search_external']");
          externalItem.find(".title").removeClass( "linky" );
          externalItem.find(".title").text( I18n.t("loading") );
          externalItem.closest( "li" ).removeClass( "active" );
          externalItem.attr( "data-type", "message" );
        },
        success: function(data) {
          // if we just returned from the most recent external search
          if( ac.searchInProgress === thisSearch ) {
            ac.searchInProgress = false;
            ac.menu.element.empty( );
            data = _.map( data, function( r ) {
              var t = new iNatModels.Taxon( r );
              t.preferred_common_name = t.preferredCommonName( iNaturalist.localeParams( ) );
              return t;
            });
            if( data.length == 0 ) {
              data.push({
                type: "message",
                title: I18n.t("no_results_found")
              });
            }
            if( options.showPlaceholder && field.val( ) ) {
              data.unshift({
                type: "placeholder",
                title: I18n.t("use_name_as_a_placeholder", { name: field.val( ) })
              });
            }
            ac._suggest( data );
            field.focus( );
          }
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
          ac.searchInProgress = false;
        }
      });
      // this is the hacky way I'm preventing autocomplete from closing
      // the result list while the external search is happening
      ac.keepOpen = true;
      setTimeout( function( ){ ac.keepOpen = false; }, 10 );
      if( e ) { e.preventDefault( ); }
      return false;
    }
    // show the best name in the search field
    if( ui.item.id ) {
      field.val( ui.item.title || ui.item.name );
    }
    // set the hidden taxon_id
    options.idEl.val( ui.item.id );
    // set the selection's thumbnail image
    field.wrappingDiv.find(".ac-select-thumb").html( ui.item.defaultPhoto );
    field.selection = ui.item;
    if( options.afterSelect ) { options.afterSelect( ui ); }
    return false;
  };
  var focus = function( e, ui ) {
    if( ui.item.type === "message" ) {
      return;
    }
    var li = ui.item.id ?
      ac.menu.element.find("[data-taxon-id='"+ ui.item.id +"']").closest("li") :
      ac.menu.element.find("[data-type='"+ ui.item.type +"']").closest("li")
    li.parent( ).find( "li" ).removeClass( "active" );
    li.addClass( "active" );
    return false;
  };

  var ac = field.genericAutocomplete( _.extend( { }, {
    extraClass: "taxon",
    source: source,
    select: select,
    focus: focus,
    createWrappingDiv: autocompleter.createWrappingDiv
  }, options ));
  if( !ac ) { return; }
  field.bind( "assignSelection", function( e, t ) {
    options.idEl.val( t.id );
    t.title = t.preferred_common_name || t.name;
    field.val( t.title );
    var photo = autocompleter.defaultPhotoForResult(t)
    field.wrappingDiv.find(".ac-select-thumb").html( photo );
    field.selection = t;
    if( field.searchClear ) { $(field.searchClear).show( ); }
  });
  field.bind( "resetSelection", function( e ) {
    if( options.idEl.val( ) !== null ) {
      field.wrappingDiv.find(".ac-select-thumb").html( autocompleter.defaultPhotoForResult( { } ) );
    }
    field.selection = null;
  });
  if( options.initialSelection ) {
    field.trigger( "assignSelection", options.initialSelection );
  }
};
