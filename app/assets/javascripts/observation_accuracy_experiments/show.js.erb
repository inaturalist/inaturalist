function hideTooltip() {
  var tooltip = $( "#tooltip" );
  tooltip.css( "display", "none" );
}

function showTooltip( evt, text ) {
  var tooltip = $( "#tooltip" );
  tooltip.html( text );
  tooltip.css( "display", "block" );

  var rect = evt.target.getBoundingClientRect();
  var centerX = rect.left + rect.width / 2;
  var centerY = rect.top + rect.height / 2;

  tooltip.css( "position", "fixed" );
  tooltip.css( "left", centerX + "px" );
  tooltip.css( "top", centerY + "px" );
}

$( function () {
  $( "#hide_validators" ).hide();
  $( document ).on( "mousemove", ".bar-rect", function ( evt ) {
    showTooltip( evt, $( this ).data( "tooltip-text" ) );
  } );

  $( document ).on( "mouseout", ".bar-rect", function ( ) {
    hideTooltip( );
  } );

  var useAltHeight = false;
  function toggleHeight() {
    useAltHeight = !useAltHeight;
    function updateRects() {
      var rects = $( "rect.acc" );
      rects.each( function () {
        var $this = $( this );
        var scalefactor = $this.data( "scalefactor" );
        var height = useAltHeight ? $this.data( "altheight" ) / scalefactor : $this.data( "height" );
        $this.attr( "height", height );

        var classes = $this.attr( "class" ).split( " " );
        var firstClass = classes[1];
        var lastClass = classes[classes.length - 1];
        var correctHeight = useAltHeight
          ? $( "rect.acc.correct." + lastClass ).data( "altheight" ) / scalefactor
          : $( "rect.acc.correct." + lastClass ).data( "height" );
        var uncertainHeight = useAltHeight
          ? $( "rect.acc.uncertain." + lastClass ).data( "altheight" ) / scalefactor
          : $( "rect.acc.uncertain." + lastClass ).data( "height" );
        var incorrectHeight = useAltHeight
          ? $( "rect.acc.incorrect." + lastClass ).data( "altheight" ) / scalefactor
          : $( "rect.acc.incorrect." + lastClass ).data( "height" );
        var y = 0;
        if ( firstClass === "correct" ) {
          if ( useAltHeight ) {
            y = 100 - parseFloat( correctHeight );
          } else {
            y = parseFloat( incorrectHeight ) + parseFloat( uncertainHeight );
          }
        } else if ( firstClass === "uncertain" ) {
          if ( useAltHeight ) {
            y = 100 - parseFloat( correctHeight ) - parseFloat( uncertainHeight );
          } else {
            y = parseFloat( incorrectHeight );
          }
        } else if ( firstClass === "incorrect" ) {
          if ( useAltHeight ) {
            y = 100 - parseFloat( correctHeight ) - parseFloat( uncertainHeight ) - parseFloat( incorrectHeight );
          } else {
            y = 0;
          }
        }
        $this.attr( "y", y );
        var onmousemove = useAltHeight
          ? "showTooltip( evt, '" + firstClass + ": " + height * scalefactor + "' );"
          : "showTooltip( evt, '" + firstClass + ": " + height + "%');";
        $this.attr( "onmousemove", onmousemove );
      } );
    }
    updateRects();

    var $button = $( ".toggle-button" );
    useAltHeight ? $button.text( "show percent" ) : $button.text( "show frequency" );

    var $axisElement = $( "line.dashed-line.acc" );
    useAltHeight ? $axisElement.hide() : $axisElement.show();

    var $sampleSize = $( ".sampleSize" );
    useAltHeight ? $sampleSize.show() : $sampleSize.hide();

    var $yTextElements = $( ".ytext" );
    $yTextElements.each( function ( index, element ) {
      var $yTextElement = $( element );
      var scalefactor = $yTextElement.data( "scalefactor" );

      if ( useAltHeight ) {
        $yTextElement.text( function ( _, oldText ) {
          var newValue = ( parseInt( oldText.replace( "%", "" ), 10 ) * scalefactor );
          return newValue;
        } );
      } else {
        $yTextElement.text( function ( _, oldText ) {
          var newValue = ( parseInt( oldText, 10 ) / scalefactor ) + "%";
          return newValue;
        } );
      }
    } );
  }

  $( ".toggle-button" ).on( "click", function () {
    toggleHeight();
  } );

  $( document ).on( "click", "#additional-validators", function () {
    var currentURL = window.location.href;
    var match = currentURL.match( /\/observation_accuracy_experiments\/(\d+)/ );
    if ( match ) {
      var experimentId = match[1];
      $.ajax( {
        url: "/observation_accuracy_experiments/" + experimentId + "/get_more_validators",
        type: "GET",
        dataType: "html",
        success: function ( data ) {
          $( "#additional-validators" ).html( data );
          $( "#hide_validators" ).show();
        }
      } );
    }
  } );

  $( document ).on( "click", "#hide_validators", function () {
    $( "#additional-validators" ).toggle();
    $( this ).text( function ( i, text ) {
      var showAdditionalValidators = I18n.t( "observation_accuracy_experiment_show_additional_validators" );
      var hideAdditionalValidators = I18n.t( "observation_accuracy_experiment_hide_additional_validators" );
      return text === hideAdditionalValidators ? showAdditionalValidators : hideAdditionalValidators;
    } );
  } );
} );
